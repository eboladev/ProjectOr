// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "spotifymessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
namespace spotify {

namespace {

const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginResponse_Error_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Playlists_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Playlists_reflection_ = NULL;
const ::google::protobuf::Descriptor* Playlists_Playlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Playlists_Playlist_reflection_ = NULL;
const ::google::protobuf::Descriptor* Track_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Track_reflection_ = NULL;
const ::google::protobuf::Descriptor* Album_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Album_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadPlaylistRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadPlaylistRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadPlaylistResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadPlaylistResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncPlaylistRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncPlaylistRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncPlaylistProgress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncPlaylistProgress_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaybackRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaybackRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaybackError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaybackError_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrowseAlbumRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrowseAlbumRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrowseAlbumResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrowseAlbumResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrowseToplistRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrowseToplistRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BrowseToplistRequest_ToplistType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BrowseToplistRequest_Region_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BrowseToplistResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrowseToplistResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeekRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeekRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaybackSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaybackSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlaylistType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Bitrate_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_spotifymessages_2eproto() {
  protobuf_AddDesc_spotifymessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "spotifymessages.proto");
  GOOGLE_CHECK(file != NULL);
  LoginRequest_descriptor_ = file->message_type(0);
  static const int LoginRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, playback_settings_),
  };
  LoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest));
  LoginResponse_descriptor_ = file->message_type(1);
  static const int LoginResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, error_code_),
  };
  LoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::default_instance_,
      LoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResponse));
  LoginResponse_Error_descriptor_ = LoginResponse_descriptor_->enum_type(0);
  Playlists_descriptor_ = file->message_type(2);
  static const int Playlists_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlists, playlist_),
  };
  Playlists_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Playlists_descriptor_,
      Playlists::default_instance_,
      Playlists_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlists, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlists, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Playlists));
  Playlists_Playlist_descriptor_ = Playlists_descriptor_->nested_type(0);
  static const int Playlists_Playlist_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlists_Playlist, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlists_Playlist, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlists_Playlist, is_offline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlists_Playlist, download_progress_),
  };
  Playlists_Playlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Playlists_Playlist_descriptor_,
      Playlists_Playlist::default_instance_,
      Playlists_Playlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlists_Playlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlists_Playlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Playlists_Playlist));
  Track_descriptor_ = file->message_type(3);
  static const int Track_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, starred_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, artist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, album_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, duration_msec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, popularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, disc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, album_art_id_),
  };
  Track_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Track_descriptor_,
      Track::default_instance_,
      Track_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Track));
  Album_descriptor_ = file->message_type(4);
  static const int Album_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, track_),
  };
  Album_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Album_descriptor_,
      Album::default_instance_,
      Album_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Album));
  LoadPlaylistRequest_descriptor_ = file->message_type(5);
  static const int LoadPlaylistRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPlaylistRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPlaylistRequest, user_playlist_index_),
  };
  LoadPlaylistRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadPlaylistRequest_descriptor_,
      LoadPlaylistRequest::default_instance_,
      LoadPlaylistRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPlaylistRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPlaylistRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadPlaylistRequest));
  LoadPlaylistResponse_descriptor_ = file->message_type(6);
  static const int LoadPlaylistResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPlaylistResponse, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPlaylistResponse, track_),
  };
  LoadPlaylistResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadPlaylistResponse_descriptor_,
      LoadPlaylistResponse::default_instance_,
      LoadPlaylistResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPlaylistResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPlaylistResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadPlaylistResponse));
  SyncPlaylistRequest_descriptor_ = file->message_type(7);
  static const int SyncPlaylistRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlaylistRequest, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlaylistRequest, offline_sync_),
  };
  SyncPlaylistRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncPlaylistRequest_descriptor_,
      SyncPlaylistRequest::default_instance_,
      SyncPlaylistRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlaylistRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlaylistRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncPlaylistRequest));
  SyncPlaylistProgress_descriptor_ = file->message_type(8);
  static const int SyncPlaylistProgress_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlaylistProgress, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlaylistProgress, sync_progress_),
  };
  SyncPlaylistProgress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncPlaylistProgress_descriptor_,
      SyncPlaylistProgress::default_instance_,
      SyncPlaylistProgress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlaylistProgress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlaylistProgress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncPlaylistProgress));
  PlaybackRequest_descriptor_ = file->message_type(9);
  static const int PlaybackRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackRequest, track_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackRequest, media_port_),
  };
  PlaybackRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaybackRequest_descriptor_,
      PlaybackRequest::default_instance_,
      PlaybackRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaybackRequest));
  PlaybackError_descriptor_ = file->message_type(10);
  static const int PlaybackError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackError, error_),
  };
  PlaybackError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaybackError_descriptor_,
      PlaybackError::default_instance_,
      PlaybackError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaybackError));
  SearchRequest_descriptor_ = file->message_type(11);
  static const int SearchRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, limit_album_),
  };
  SearchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchRequest_descriptor_,
      SearchRequest::default_instance_,
      SearchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchRequest));
  SearchResponse_descriptor_ = file->message_type(12);
  static const int SearchResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, total_tracks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, did_you_mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, album_),
  };
  SearchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchResponse_descriptor_,
      SearchResponse::default_instance_,
      SearchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchResponse));
  ImageRequest_descriptor_ = file->message_type(13);
  static const int ImageRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRequest, id_),
  };
  ImageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageRequest_descriptor_,
      ImageRequest::default_instance_,
      ImageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageRequest));
  ImageResponse_descriptor_ = file->message_type(14);
  static const int ImageResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageResponse, data_),
  };
  ImageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageResponse_descriptor_,
      ImageResponse::default_instance_,
      ImageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageResponse));
  BrowseAlbumRequest_descriptor_ = file->message_type(15);
  static const int BrowseAlbumRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseAlbumRequest, uri_),
  };
  BrowseAlbumRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrowseAlbumRequest_descriptor_,
      BrowseAlbumRequest::default_instance_,
      BrowseAlbumRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseAlbumRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseAlbumRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrowseAlbumRequest));
  BrowseAlbumResponse_descriptor_ = file->message_type(16);
  static const int BrowseAlbumResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseAlbumResponse, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseAlbumResponse, track_),
  };
  BrowseAlbumResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrowseAlbumResponse_descriptor_,
      BrowseAlbumResponse::default_instance_,
      BrowseAlbumResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseAlbumResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseAlbumResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrowseAlbumResponse));
  BrowseToplistRequest_descriptor_ = file->message_type(17);
  static const int BrowseToplistRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseToplistRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseToplistRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseToplistRequest, username_),
  };
  BrowseToplistRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrowseToplistRequest_descriptor_,
      BrowseToplistRequest::default_instance_,
      BrowseToplistRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseToplistRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseToplistRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrowseToplistRequest));
  BrowseToplistRequest_ToplistType_descriptor_ = BrowseToplistRequest_descriptor_->enum_type(0);
  BrowseToplistRequest_Region_descriptor_ = BrowseToplistRequest_descriptor_->enum_type(1);
  BrowseToplistResponse_descriptor_ = file->message_type(18);
  static const int BrowseToplistResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseToplistResponse, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseToplistResponse, track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseToplistResponse, album_),
  };
  BrowseToplistResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrowseToplistResponse_descriptor_,
      BrowseToplistResponse::default_instance_,
      BrowseToplistResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseToplistResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseToplistResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrowseToplistResponse));
  SeekRequest_descriptor_ = file->message_type(19);
  static const int SeekRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekRequest, offset_bytes_),
  };
  SeekRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeekRequest_descriptor_,
      SeekRequest::default_instance_,
      SeekRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeekRequest));
  PlaybackSettings_descriptor_ = file->message_type(20);
  static const int PlaybackSettings_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackSettings, bitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackSettings, volume_normalisation_),
  };
  PlaybackSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaybackSettings_descriptor_,
      PlaybackSettings::default_instance_,
      PlaybackSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaybackSettings));
  Message_descriptor_ = file->message_type(21);
  static const int Message_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, login_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, login_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, playlists_updated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, load_playlist_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, load_playlist_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, playback_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, playback_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, search_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, search_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, image_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, image_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, sync_playlist_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, sync_playlist_progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, browse_album_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, browse_album_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, seek_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, set_playback_settings_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, browse_toplist_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, browse_toplist_response_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  PlaylistType_descriptor_ = file->enum_type(0);
  Bitrate_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_spotifymessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResponse_descriptor_, &LoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Playlists_descriptor_, &Playlists::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Playlists_Playlist_descriptor_, &Playlists_Playlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Track_descriptor_, &Track::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Album_descriptor_, &Album::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadPlaylistRequest_descriptor_, &LoadPlaylistRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadPlaylistResponse_descriptor_, &LoadPlaylistResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncPlaylistRequest_descriptor_, &SyncPlaylistRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncPlaylistProgress_descriptor_, &SyncPlaylistProgress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaybackRequest_descriptor_, &PlaybackRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaybackError_descriptor_, &PlaybackError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchRequest_descriptor_, &SearchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchResponse_descriptor_, &SearchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageRequest_descriptor_, &ImageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageResponse_descriptor_, &ImageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrowseAlbumRequest_descriptor_, &BrowseAlbumRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrowseAlbumResponse_descriptor_, &BrowseAlbumResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrowseToplistRequest_descriptor_, &BrowseToplistRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrowseToplistResponse_descriptor_, &BrowseToplistResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeekRequest_descriptor_, &SeekRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaybackSettings_descriptor_, &PlaybackSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_spotifymessages_2eproto() {
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete LoginResponse::default_instance_;
  delete LoginResponse_reflection_;
  delete Playlists::default_instance_;
  delete Playlists_reflection_;
  delete Playlists_Playlist::default_instance_;
  delete Playlists_Playlist_reflection_;
  delete Track::default_instance_;
  delete Track_reflection_;
  delete Album::default_instance_;
  delete Album_reflection_;
  delete LoadPlaylistRequest::default_instance_;
  delete LoadPlaylistRequest_reflection_;
  delete LoadPlaylistResponse::default_instance_;
  delete LoadPlaylistResponse_reflection_;
  delete SyncPlaylistRequest::default_instance_;
  delete SyncPlaylistRequest_reflection_;
  delete SyncPlaylistProgress::default_instance_;
  delete SyncPlaylistProgress_reflection_;
  delete PlaybackRequest::default_instance_;
  delete PlaybackRequest_reflection_;
  delete PlaybackError::default_instance_;
  delete PlaybackError_reflection_;
  delete SearchRequest::default_instance_;
  delete SearchRequest_reflection_;
  delete SearchResponse::default_instance_;
  delete SearchResponse_reflection_;
  delete ImageRequest::default_instance_;
  delete ImageRequest_reflection_;
  delete ImageResponse::default_instance_;
  delete ImageResponse_reflection_;
  delete BrowseAlbumRequest::default_instance_;
  delete BrowseAlbumRequest_reflection_;
  delete BrowseAlbumResponse::default_instance_;
  delete BrowseAlbumResponse_reflection_;
  delete BrowseToplistRequest::default_instance_;
  delete BrowseToplistRequest_reflection_;
  delete BrowseToplistResponse::default_instance_;
  delete BrowseToplistResponse_reflection_;
  delete SeekRequest::default_instance_;
  delete SeekRequest_reflection_;
  delete PlaybackSettings::default_instance_;
  delete PlaybackSettings_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_spotifymessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025spotifymessages.proto\022\npb.spotify\"k\n\014L"
    "oginRequest\022\020\n\010username\030\001 \002(\t\022\020\n\010passwor"
    "d\030\002 \001(\t\0227\n\021playback_settings\030\003 \001(\0132\034.pb."
    "spotify.PlaybackSettings\"\323\001\n\rLoginRespon"
    "se\022\017\n\007success\030\001 \002(\010\022\r\n\005error\030\002 \002(\t\022:\n\ner"
    "ror_code\030\003 \001(\0162\037.pb.spotify.LoginRespons"
    "e.Error:\005Other\"f\n\005Error\022\031\n\025BadUsernameOr"
    "Password\020\001\022\016\n\nUserBanned\020\002\022\024\n\020UserNeedsP"
    "remium\020\003\022\t\n\005Other\020\004\022\021\n\rReloginFailed\020\005\"\225"
    "\001\n\tPlaylists\0220\n\010playlist\030\001 \003(\0132\036.pb.spot"
    "ify.Playlists.Playlist\032V\n\010Playlist\022\r\n\005in"
    "dex\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\022\n\nis_offline\030\003 "
    "\002(\010\022\031\n\021download_progress\030\004 \001(\005\"\277\001\n\005Track"
    "\022\017\n\007starred\030\001 \002(\010\022\r\n\005title\030\002 \002(\t\022\016\n\006arti"
    "st\030\003 \003(\t\022\r\n\005album\030\004 \002(\t\022\025\n\rduration_msec"
    "\030\005 \002(\005\022\022\n\npopularity\030\006 \002(\005\022\014\n\004disc\030\007 \002(\005"
    "\022\r\n\005track\030\010 \002(\005\022\014\n\004year\030\t \002(\005\022\013\n\003uri\030\n \002"
    "(\t\022\024\n\014album_art_id\030\013 \002(\t\"N\n\005Album\022#\n\010met"
    "adata\030\001 \002(\0132\021.pb.spotify.Track\022 \n\005track\030"
    "\002 \003(\0132\021.pb.spotify.Track\"Z\n\023LoadPlaylist"
    "Request\022&\n\004type\030\001 \002(\0162\030.pb.spotify.Playl"
    "istType\022\033\n\023user_playlist_index\030\002 \001(\005\"j\n\024"
    "LoadPlaylistResponse\0220\n\007request\030\001 \002(\0132\037."
    "pb.spotify.LoadPlaylistRequest\022 \n\005track\030"
    "\002 \003(\0132\021.pb.spotify.Track\"]\n\023SyncPlaylist"
    "Request\0220\n\007request\030\001 \002(\0132\037.pb.spotify.Lo"
    "adPlaylistRequest\022\024\n\014offline_sync\030\002 \002(\010\""
    "_\n\024SyncPlaylistProgress\0220\n\007request\030\001 \002(\013"
    "2\037.pb.spotify.LoadPlaylistRequest\022\025\n\rsyn"
    "c_progress\030\002 \002(\005\"8\n\017PlaybackRequest\022\021\n\tt"
    "rack_uri\030\001 \002(\t\022\022\n\nmedia_port\030\002 \002(\005\"\036\n\rPl"
    "aybackError\022\r\n\005error\030\001 \002(\t\"J\n\rSearchRequ"
    "est\022\r\n\005query\030\001 \002(\t\022\022\n\005limit\030\002 \001(\005:\003250\022\026"
    "\n\013limit_album\030\003 \001(\005:\0010\"\274\001\n\016SearchRespons"
    "e\022*\n\007request\030\001 \002(\0132\031.pb.spotify.SearchRe"
    "quest\022!\n\006result\030\002 \003(\0132\021.pb.spotify.Track"
    "\022\024\n\014total_tracks\030\003 \001(\005\022\024\n\014did_you_mean\030\004"
    " \001(\t\022\r\n\005error\030\005 \001(\t\022 \n\005album\030\007 \003(\0132\021.pb."
    "spotify.Album\"\032\n\014ImageRequest\022\n\n\002id\030\001 \002("
    "\t\")\n\rImageResponse\022\n\n\002id\030\001 \002(\t\022\014\n\004data\030\002"
    " \001(\014\"!\n\022BrowseAlbumRequest\022\013\n\003uri\030\001 \002(\t\""
    "D\n\023BrowseAlbumResponse\022\013\n\003uri\030\001 \002(\t\022 \n\005t"
    "rack\030\002 \003(\0132\021.pb.spotify.Track\"\201\002\n\024Browse"
    "ToplistRequest\022:\n\004type\030\001 \002(\0162,.pb.spotif"
    "y.BrowseToplistRequest.ToplistType\022C\n\006re"
    "gion\030\002 \001(\0162\'.pb.spotify.BrowseToplistReq"
    "uest.Region:\nEverywhere\022\020\n\010username\030\003 \001("
    "\t\"2\n\013ToplistType\022\013\n\007Artists\020\001\022\n\n\006Albums\020"
    "\002\022\n\n\006Tracks\020\003\"\"\n\006Region\022\016\n\nEverywhere\020\001\022"
    "\010\n\004User\020\002\"\216\001\n\025BrowseToplistResponse\0221\n\007r"
    "equest\030\001 \002(\0132 .pb.spotify.BrowseToplistR"
    "equest\022 \n\005track\030\002 \003(\0132\021.pb.spotify.Track"
    "\022 \n\005album\030\003 \003(\0132\021.pb.spotify.Album\"#\n\013Se"
    "ekRequest\022\024\n\014offset_bytes\030\001 \001(\003\"j\n\020Playb"
    "ackSettings\0221\n\007bitrate\030\001 \001(\0162\023.pb.spotif"
    "y.Bitrate:\013Bitrate320k\022#\n\024volume_normali"
    "sation\030\002 \001(\010:\005false\"\335\010\n\007Message\022\n\n\002id\030\022 "
    "\001(\005\022/\n\rlogin_request\030\001 \001(\0132\030.pb.spotify."
    "LoginRequest\0221\n\016login_response\030\002 \001(\0132\031.p"
    "b.spotify.LoginResponse\0220\n\021playlists_upd"
    "ated\030\003 \001(\0132\025.pb.spotify.Playlists\022>\n\025loa"
    "d_playlist_request\030\004 \001(\0132\037.pb.spotify.Lo"
    "adPlaylistRequest\022@\n\026load_playlist_respo"
    "nse\030\005 \001(\0132 .pb.spotify.LoadPlaylistRespo"
    "nse\0225\n\020playback_request\030\006 \001(\0132\033.pb.spoti"
    "fy.PlaybackRequest\0221\n\016playback_error\030\007 \001"
    "(\0132\031.pb.spotify.PlaybackError\0221\n\016search_"
    "request\030\010 \001(\0132\031.pb.spotify.SearchRequest"
    "\0223\n\017search_response\030\t \001(\0132\032.pb.spotify.S"
    "earchResponse\022/\n\rimage_request\030\n \001(\0132\030.p"
    "b.spotify.ImageRequest\0221\n\016image_response"
    "\030\013 \001(\0132\031.pb.spotify.ImageResponse\022>\n\025syn"
    "c_playlist_request\030\014 \001(\0132\037.pb.spotify.Sy"
    "ncPlaylistRequest\022@\n\026sync_playlist_progr"
    "ess\030\r \001(\0132 .pb.spotify.SyncPlaylistProgr"
    "ess\022<\n\024browse_album_request\030\016 \001(\0132\036.pb.s"
    "potify.BrowseAlbumRequest\022>\n\025browse_albu"
    "m_response\030\017 \001(\0132\037.pb.spotify.BrowseAlbu"
    "mResponse\022-\n\014seek_request\030\020 \001(\0132\027.pb.spo"
    "tify.SeekRequest\022C\n\035set_playback_setting"
    "s_request\030\021 \001(\0132\034.pb.spotify.PlaybackSet"
    "tings\022@\n\026browse_toplist_request\030\023 \001(\0132 ."
    "pb.spotify.BrowseToplistRequest\022B\n\027brows"
    "e_toplist_response\030\024 \001(\0132!.pb.spotify.Br"
    "owseToplistResponse*8\n\014PlaylistType\022\013\n\007S"
    "tarred\020\001\022\t\n\005Inbox\020\002\022\020\n\014UserPlaylist\020\003*;\n"
    "\007Bitrate\022\016\n\nBitrate96k\020\001\022\017\n\013Bitrate160k\020"
    "\002\022\017\n\013Bitrate320k\020\003", 3498);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spotifymessages.proto", &protobuf_RegisterTypes);
  LoginRequest::default_instance_ = new LoginRequest();
  LoginResponse::default_instance_ = new LoginResponse();
  Playlists::default_instance_ = new Playlists();
  Playlists_Playlist::default_instance_ = new Playlists_Playlist();
  Track::default_instance_ = new Track();
  Album::default_instance_ = new Album();
  LoadPlaylistRequest::default_instance_ = new LoadPlaylistRequest();
  LoadPlaylistResponse::default_instance_ = new LoadPlaylistResponse();
  SyncPlaylistRequest::default_instance_ = new SyncPlaylistRequest();
  SyncPlaylistProgress::default_instance_ = new SyncPlaylistProgress();
  PlaybackRequest::default_instance_ = new PlaybackRequest();
  PlaybackError::default_instance_ = new PlaybackError();
  SearchRequest::default_instance_ = new SearchRequest();
  SearchResponse::default_instance_ = new SearchResponse();
  ImageRequest::default_instance_ = new ImageRequest();
  ImageResponse::default_instance_ = new ImageResponse();
  BrowseAlbumRequest::default_instance_ = new BrowseAlbumRequest();
  BrowseAlbumResponse::default_instance_ = new BrowseAlbumResponse();
  BrowseToplistRequest::default_instance_ = new BrowseToplistRequest();
  BrowseToplistResponse::default_instance_ = new BrowseToplistResponse();
  SeekRequest::default_instance_ = new SeekRequest();
  PlaybackSettings::default_instance_ = new PlaybackSettings();
  Message::default_instance_ = new Message();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  Playlists::default_instance_->InitAsDefaultInstance();
  Playlists_Playlist::default_instance_->InitAsDefaultInstance();
  Track::default_instance_->InitAsDefaultInstance();
  Album::default_instance_->InitAsDefaultInstance();
  LoadPlaylistRequest::default_instance_->InitAsDefaultInstance();
  LoadPlaylistResponse::default_instance_->InitAsDefaultInstance();
  SyncPlaylistRequest::default_instance_->InitAsDefaultInstance();
  SyncPlaylistProgress::default_instance_->InitAsDefaultInstance();
  PlaybackRequest::default_instance_->InitAsDefaultInstance();
  PlaybackError::default_instance_->InitAsDefaultInstance();
  SearchRequest::default_instance_->InitAsDefaultInstance();
  SearchResponse::default_instance_->InitAsDefaultInstance();
  ImageRequest::default_instance_->InitAsDefaultInstance();
  ImageResponse::default_instance_->InitAsDefaultInstance();
  BrowseAlbumRequest::default_instance_->InitAsDefaultInstance();
  BrowseAlbumResponse::default_instance_->InitAsDefaultInstance();
  BrowseToplistRequest::default_instance_->InitAsDefaultInstance();
  BrowseToplistResponse::default_instance_->InitAsDefaultInstance();
  SeekRequest::default_instance_->InitAsDefaultInstance();
  PlaybackSettings::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_spotifymessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_spotifymessages_2eproto {
  StaticDescriptorInitializer_spotifymessages_2eproto() {
    protobuf_AddDesc_spotifymessages_2eproto();
  }
} static_descriptor_initializer_spotifymessages_2eproto_;

const ::google::protobuf::EnumDescriptor* PlaylistType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaylistType_descriptor_;
}
bool PlaylistType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Bitrate_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bitrate_descriptor_;
}
bool Bitrate_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kUsernameFieldNumber;
const int LoginRequest::kPasswordFieldNumber;
const int LoginRequest::kPlaybackSettingsFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRequest::InitAsDefaultInstance() {
  playback_settings_ = const_cast< ::pb::spotify::PlaybackSettings*>(&::pb::spotify::PlaybackSettings::default_instance());
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRequest::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playback_settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
    delete playback_settings_;
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_playback_settings()) {
      if (playback_settings_ != NULL) playback_settings_->::pb::spotify::PlaybackSettings::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playback_settings;
        break;
      }
      
      // optional .pb.spotify.PlaybackSettings playback_settings = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playback_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playback_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // optional .pb.spotify.PlaybackSettings playback_settings = 3;
  if (has_playback_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playback_settings(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // optional .pb.spotify.PlaybackSettings playback_settings = 3;
  if (has_playback_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playback_settings(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional .pb.spotify.PlaybackSettings playback_settings = 3;
    if (has_playback_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playback_settings());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_playback_settings()) {
      mutable_playback_settings()->::pb::spotify::PlaybackSettings::MergeFrom(from.playback_settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(playback_settings_, other->playback_settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LoginResponse_Error_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_Error_descriptor_;
}
bool LoginResponse_Error_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoginResponse_Error LoginResponse::BadUsernameOrPassword;
const LoginResponse_Error LoginResponse::UserBanned;
const LoginResponse_Error LoginResponse::UserNeedsPremium;
const LoginResponse_Error LoginResponse::Other;
const LoginResponse_Error LoginResponse::ReloginFailed;
const LoginResponse_Error LoginResponse::Error_MIN;
const LoginResponse_Error LoginResponse::Error_MAX;
const int LoginResponse::Error_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LoginResponse::kSuccessFieldNumber;
const int LoginResponse::kErrorFieldNumber;
const int LoginResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

LoginResponse::LoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginResponse::InitAsDefaultInstance() {
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_code_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponse::~LoginResponse() {
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New() const {
  return new LoginResponse;
}

void LoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
    error_code_ = 4;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }
      
      // required string error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_code;
        break;
      }
      
      // optional .pb.spotify.LoginResponse.Error error_code = 3 [default = Other];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::spotify::LoginResponse_Error_IsValid(value)) {
            set_error_code(static_cast< ::pb::spotify::LoginResponse_Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  // required string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error(), output);
  }
  
  // optional .pb.spotify.LoginResponse.Error error_code = 3 [default = Other];
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  // required string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }
  
  // optional .pb.spotify.LoginResponse.Error error_code = 3 [default = Other];
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // required string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }
    
    // optional .pb.spotify.LoginResponse.Error error_code = 3 [default = Other];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(error_, other->error_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Playlists_Playlist::kIndexFieldNumber;
const int Playlists_Playlist::kNameFieldNumber;
const int Playlists_Playlist::kIsOfflineFieldNumber;
const int Playlists_Playlist::kDownloadProgressFieldNumber;
#endif  // !_MSC_VER

Playlists_Playlist::Playlists_Playlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Playlists_Playlist::InitAsDefaultInstance() {
}

Playlists_Playlist::Playlists_Playlist(const Playlists_Playlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Playlists_Playlist::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_offline_ = false;
  download_progress_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Playlists_Playlist::~Playlists_Playlist() {
  SharedDtor();
}

void Playlists_Playlist::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Playlists_Playlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Playlists_Playlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Playlists_Playlist_descriptor_;
}

const Playlists_Playlist& Playlists_Playlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

Playlists_Playlist* Playlists_Playlist::default_instance_ = NULL;

Playlists_Playlist* Playlists_Playlist::New() const {
  return new Playlists_Playlist;
}

void Playlists_Playlist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    is_offline_ = false;
    download_progress_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Playlists_Playlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_offline;
        break;
      }
      
      // required bool is_offline = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_offline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_offline_)));
          set_has_is_offline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_download_progress;
        break;
      }
      
      // optional int32 download_progress = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &download_progress_)));
          set_has_download_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Playlists_Playlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required bool is_offline = 3;
  if (has_is_offline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_offline(), output);
  }
  
  // optional int32 download_progress = 4;
  if (has_download_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->download_progress(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Playlists_Playlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required bool is_offline = 3;
  if (has_is_offline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_offline(), target);
  }
  
  // optional int32 download_progress = 4;
  if (has_download_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->download_progress(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Playlists_Playlist::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required bool is_offline = 3;
    if (has_is_offline()) {
      total_size += 1 + 1;
    }
    
    // optional int32 download_progress = 4;
    if (has_download_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->download_progress());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Playlists_Playlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Playlists_Playlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Playlists_Playlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Playlists_Playlist::MergeFrom(const Playlists_Playlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_is_offline()) {
      set_is_offline(from.is_offline());
    }
    if (from.has_download_progress()) {
      set_download_progress(from.download_progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Playlists_Playlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Playlists_Playlist::CopyFrom(const Playlists_Playlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Playlists_Playlist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Playlists_Playlist::Swap(Playlists_Playlist* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(name_, other->name_);
    std::swap(is_offline_, other->is_offline_);
    std::swap(download_progress_, other->download_progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Playlists_Playlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Playlists_Playlist_descriptor_;
  metadata.reflection = Playlists_Playlist_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Playlists::kPlaylistFieldNumber;
#endif  // !_MSC_VER

Playlists::Playlists()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Playlists::InitAsDefaultInstance() {
}

Playlists::Playlists(const Playlists& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Playlists::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Playlists::~Playlists() {
  SharedDtor();
}

void Playlists::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Playlists::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Playlists::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Playlists_descriptor_;
}

const Playlists& Playlists::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

Playlists* Playlists::default_instance_ = NULL;

Playlists* Playlists::New() const {
  return new Playlists;
}

void Playlists::Clear() {
  playlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Playlists::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.spotify.Playlists.Playlist playlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_playlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Playlists::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.spotify.Playlists.Playlist playlist = 1;
  for (int i = 0; i < this->playlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Playlists::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.spotify.Playlists.Playlist playlist = 1;
  for (int i = 0; i < this->playlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Playlists::ByteSize() const {
  int total_size = 0;
  
  // repeated .pb.spotify.Playlists.Playlist playlist = 1;
  total_size += 1 * this->playlist_size();
  for (int i = 0; i < this->playlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Playlists::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Playlists* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Playlists*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Playlists::MergeFrom(const Playlists& from) {
  GOOGLE_CHECK_NE(&from, this);
  playlist_.MergeFrom(from.playlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Playlists::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Playlists::CopyFrom(const Playlists& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Playlists::IsInitialized() const {
  
  for (int i = 0; i < playlist_size(); i++) {
    if (!this->playlist(i).IsInitialized()) return false;
  }
  return true;
}

void Playlists::Swap(Playlists* other) {
  if (other != this) {
    playlist_.Swap(&other->playlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Playlists::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Playlists_descriptor_;
  metadata.reflection = Playlists_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Track::kStarredFieldNumber;
const int Track::kTitleFieldNumber;
const int Track::kArtistFieldNumber;
const int Track::kAlbumFieldNumber;
const int Track::kDurationMsecFieldNumber;
const int Track::kPopularityFieldNumber;
const int Track::kDiscFieldNumber;
const int Track::kTrackFieldNumber;
const int Track::kYearFieldNumber;
const int Track::kUriFieldNumber;
const int Track::kAlbumArtIdFieldNumber;
#endif  // !_MSC_VER

Track::Track()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Track::InitAsDefaultInstance() {
}

Track::Track(const Track& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Track::SharedCtor() {
  _cached_size_ = 0;
  starred_ = false;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  album_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_msec_ = 0;
  popularity_ = 0;
  disc_ = 0;
  track_ = 0;
  year_ = 0;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  album_art_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Track::~Track() {
  SharedDtor();
}

void Track::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (album_ != &::google::protobuf::internal::kEmptyString) {
    delete album_;
  }
  if (uri_ != &::google::protobuf::internal::kEmptyString) {
    delete uri_;
  }
  if (album_art_id_ != &::google::protobuf::internal::kEmptyString) {
    delete album_art_id_;
  }
  if (this != default_instance_) {
  }
}

void Track::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Track::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Track_descriptor_;
}

const Track& Track::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

Track* Track::default_instance_ = NULL;

Track* Track::New() const {
  return new Track;
}

void Track::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starred_ = false;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_album()) {
      if (album_ != &::google::protobuf::internal::kEmptyString) {
        album_->clear();
      }
    }
    duration_msec_ = 0;
    popularity_ = 0;
    disc_ = 0;
    track_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    year_ = 0;
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::kEmptyString) {
        uri_->clear();
      }
    }
    if (has_album_art_id()) {
      if (album_art_id_ != &::google::protobuf::internal::kEmptyString) {
        album_art_id_->clear();
      }
    }
  }
  artist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Track::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool starred = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &starred_)));
          set_has_starred();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }
      
      // required string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_artist;
        break;
      }
      
      // repeated string artist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_artist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->artist(0).data(), this->artist(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_artist;
        if (input->ExpectTag(34)) goto parse_album;
        break;
      }
      
      // required string album = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album().data(), this->album().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_duration_msec;
        break;
      }
      
      // required int32 duration_msec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_msec_)));
          set_has_duration_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_popularity;
        break;
      }
      
      // required int32 popularity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_popularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &popularity_)));
          set_has_popularity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_disc;
        break;
      }
      
      // required int32 disc = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disc_)));
          set_has_disc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_track;
        break;
      }
      
      // required int32 track = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_track:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_)));
          set_has_track();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_year;
        break;
      }
      
      // required int32 year = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_uri;
        break;
      }
      
      // required string uri = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_album_art_id;
        break;
      }
      
      // required string album_art_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album_art_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album_art_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album_art_id().data(), this->album_art_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Track::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool starred = 1;
  if (has_starred()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->starred(), output);
  }
  
  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }
  
  // repeated string artist = 3;
  for (int i = 0; i < this->artist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->artist(i).data(), this->artist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->artist(i), output);
  }
  
  // required string album = 4;
  if (has_album()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album().data(), this->album().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->album(), output);
  }
  
  // required int32 duration_msec = 5;
  if (has_duration_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->duration_msec(), output);
  }
  
  // required int32 popularity = 6;
  if (has_popularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->popularity(), output);
  }
  
  // required int32 disc = 7;
  if (has_disc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->disc(), output);
  }
  
  // required int32 track = 8;
  if (has_track()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->track(), output);
  }
  
  // required int32 year = 9;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->year(), output);
  }
  
  // required string uri = 10;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->uri(), output);
  }
  
  // required string album_art_id = 11;
  if (has_album_art_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_art_id().data(), this->album_art_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->album_art_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Track::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool starred = 1;
  if (has_starred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->starred(), target);
  }
  
  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }
  
  // repeated string artist = 3;
  for (int i = 0; i < this->artist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->artist(i).data(), this->artist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->artist(i), target);
  }
  
  // required string album = 4;
  if (has_album()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album().data(), this->album().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->album(), target);
  }
  
  // required int32 duration_msec = 5;
  if (has_duration_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->duration_msec(), target);
  }
  
  // required int32 popularity = 6;
  if (has_popularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->popularity(), target);
  }
  
  // required int32 disc = 7;
  if (has_disc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->disc(), target);
  }
  
  // required int32 track = 8;
  if (has_track()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->track(), target);
  }
  
  // required int32 year = 9;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->year(), target);
  }
  
  // required string uri = 10;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->uri(), target);
  }
  
  // required string album_art_id = 11;
  if (has_album_art_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_art_id().data(), this->album_art_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->album_art_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Track::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool starred = 1;
    if (has_starred()) {
      total_size += 1 + 1;
    }
    
    // required string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // required string album = 4;
    if (has_album()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album());
    }
    
    // required int32 duration_msec = 5;
    if (has_duration_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration_msec());
    }
    
    // required int32 popularity = 6;
    if (has_popularity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->popularity());
    }
    
    // required int32 disc = 7;
    if (has_disc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->disc());
    }
    
    // required int32 track = 8;
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->track());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 year = 9;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }
    
    // required string uri = 10;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }
    
    // required string album_art_id = 11;
    if (has_album_art_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album_art_id());
    }
    
  }
  // repeated string artist = 3;
  total_size += 1 * this->artist_size();
  for (int i = 0; i < this->artist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->artist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Track::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Track* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Track*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Track::MergeFrom(const Track& from) {
  GOOGLE_CHECK_NE(&from, this);
  artist_.MergeFrom(from.artist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starred()) {
      set_starred(from.starred());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_album()) {
      set_album(from.album());
    }
    if (from.has_duration_msec()) {
      set_duration_msec(from.duration_msec());
    }
    if (from.has_popularity()) {
      set_popularity(from.popularity());
    }
    if (from.has_disc()) {
      set_disc(from.disc());
    }
    if (from.has_track()) {
      set_track(from.track());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_album_art_id()) {
      set_album_art_id(from.album_art_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Track::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Track::CopyFrom(const Track& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Track::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007fb) != 0x000007fb) return false;
  
  return true;
}

void Track::Swap(Track* other) {
  if (other != this) {
    std::swap(starred_, other->starred_);
    std::swap(title_, other->title_);
    artist_.Swap(&other->artist_);
    std::swap(album_, other->album_);
    std::swap(duration_msec_, other->duration_msec_);
    std::swap(popularity_, other->popularity_);
    std::swap(disc_, other->disc_);
    std::swap(track_, other->track_);
    std::swap(year_, other->year_);
    std::swap(uri_, other->uri_);
    std::swap(album_art_id_, other->album_art_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Track::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Track_descriptor_;
  metadata.reflection = Track_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Album::kMetadataFieldNumber;
const int Album::kTrackFieldNumber;
#endif  // !_MSC_VER

Album::Album()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Album::InitAsDefaultInstance() {
  metadata_ = const_cast< ::pb::spotify::Track*>(&::pb::spotify::Track::default_instance());
}

Album::Album(const Album& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Album::SharedCtor() {
  _cached_size_ = 0;
  metadata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Album::~Album() {
  SharedDtor();
}

void Album::SharedDtor() {
  if (this != default_instance_) {
    delete metadata_;
  }
}

void Album::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Album::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Album_descriptor_;
}

const Album& Album::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

Album* Album::default_instance_ = NULL;

Album* Album::New() const {
  return new Album;
}

void Album::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_metadata()) {
      if (metadata_ != NULL) metadata_->::pb::spotify::Track::Clear();
    }
  }
  track_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Album::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.spotify.Track metadata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_track;
        break;
      }
      
      // repeated .pb.spotify.Track track = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_track;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Album::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.spotify.Track metadata = 1;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metadata(), output);
  }
  
  // repeated .pb.spotify.Track track = 2;
  for (int i = 0; i < this->track_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->track(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Album::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.spotify.Track metadata = 1;
  if (has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->metadata(), target);
  }
  
  // repeated .pb.spotify.Track track = 2;
  for (int i = 0; i < this->track_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->track(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Album::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.spotify.Track metadata = 1;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata());
    }
    
  }
  // repeated .pb.spotify.Track track = 2;
  total_size += 1 * this->track_size();
  for (int i = 0; i < this->track_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->track(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Album::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Album* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Album*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Album::MergeFrom(const Album& from) {
  GOOGLE_CHECK_NE(&from, this);
  track_.MergeFrom(from.track_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_metadata()) {
      mutable_metadata()->::pb::spotify::Track::MergeFrom(from.metadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Album::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Album::CopyFrom(const Album& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Album::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_metadata()) {
    if (!this->metadata().IsInitialized()) return false;
  }
  for (int i = 0; i < track_size(); i++) {
    if (!this->track(i).IsInitialized()) return false;
  }
  return true;
}

void Album::Swap(Album* other) {
  if (other != this) {
    std::swap(metadata_, other->metadata_);
    track_.Swap(&other->track_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Album::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Album_descriptor_;
  metadata.reflection = Album_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadPlaylistRequest::kTypeFieldNumber;
const int LoadPlaylistRequest::kUserPlaylistIndexFieldNumber;
#endif  // !_MSC_VER

LoadPlaylistRequest::LoadPlaylistRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoadPlaylistRequest::InitAsDefaultInstance() {
}

LoadPlaylistRequest::LoadPlaylistRequest(const LoadPlaylistRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoadPlaylistRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  user_playlist_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadPlaylistRequest::~LoadPlaylistRequest() {
  SharedDtor();
}

void LoadPlaylistRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoadPlaylistRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadPlaylistRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadPlaylistRequest_descriptor_;
}

const LoadPlaylistRequest& LoadPlaylistRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

LoadPlaylistRequest* LoadPlaylistRequest::default_instance_ = NULL;

LoadPlaylistRequest* LoadPlaylistRequest::New() const {
  return new LoadPlaylistRequest;
}

void LoadPlaylistRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    user_playlist_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadPlaylistRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.spotify.PlaylistType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (pb::spotify::PlaylistType_IsValid(value)) {
            set_type(static_cast< pb::spotify::PlaylistType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_playlist_index;
        break;
      }
      
      // optional int32 user_playlist_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_playlist_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_playlist_index_)));
          set_has_user_playlist_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoadPlaylistRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.spotify.PlaylistType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 user_playlist_index = 2;
  if (has_user_playlist_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_playlist_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoadPlaylistRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.spotify.PlaylistType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 user_playlist_index = 2;
  if (has_user_playlist_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_playlist_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoadPlaylistRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.spotify.PlaylistType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 user_playlist_index = 2;
    if (has_user_playlist_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_playlist_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadPlaylistRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadPlaylistRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadPlaylistRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadPlaylistRequest::MergeFrom(const LoadPlaylistRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_user_playlist_index()) {
      set_user_playlist_index(from.user_playlist_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadPlaylistRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadPlaylistRequest::CopyFrom(const LoadPlaylistRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadPlaylistRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LoadPlaylistRequest::Swap(LoadPlaylistRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(user_playlist_index_, other->user_playlist_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadPlaylistRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadPlaylistRequest_descriptor_;
  metadata.reflection = LoadPlaylistRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadPlaylistResponse::kRequestFieldNumber;
const int LoadPlaylistResponse::kTrackFieldNumber;
#endif  // !_MSC_VER

LoadPlaylistResponse::LoadPlaylistResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoadPlaylistResponse::InitAsDefaultInstance() {
  request_ = const_cast< ::pb::spotify::LoadPlaylistRequest*>(&::pb::spotify::LoadPlaylistRequest::default_instance());
}

LoadPlaylistResponse::LoadPlaylistResponse(const LoadPlaylistResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoadPlaylistResponse::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadPlaylistResponse::~LoadPlaylistResponse() {
  SharedDtor();
}

void LoadPlaylistResponse::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
  }
}

void LoadPlaylistResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadPlaylistResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadPlaylistResponse_descriptor_;
}

const LoadPlaylistResponse& LoadPlaylistResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

LoadPlaylistResponse* LoadPlaylistResponse::default_instance_ = NULL;

LoadPlaylistResponse* LoadPlaylistResponse::New() const {
  return new LoadPlaylistResponse;
}

void LoadPlaylistResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::pb::spotify::LoadPlaylistRequest::Clear();
    }
  }
  track_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadPlaylistResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.spotify.LoadPlaylistRequest request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_track;
        break;
      }
      
      // repeated .pb.spotify.Track track = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_track;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoadPlaylistResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.spotify.LoadPlaylistRequest request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }
  
  // repeated .pb.spotify.Track track = 2;
  for (int i = 0; i < this->track_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->track(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoadPlaylistResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.spotify.LoadPlaylistRequest request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }
  
  // repeated .pb.spotify.Track track = 2;
  for (int i = 0; i < this->track_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->track(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoadPlaylistResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.spotify.LoadPlaylistRequest request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }
    
  }
  // repeated .pb.spotify.Track track = 2;
  total_size += 1 * this->track_size();
  for (int i = 0; i < this->track_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->track(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadPlaylistResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadPlaylistResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadPlaylistResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadPlaylistResponse::MergeFrom(const LoadPlaylistResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  track_.MergeFrom(from.track_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::pb::spotify::LoadPlaylistRequest::MergeFrom(from.request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadPlaylistResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadPlaylistResponse::CopyFrom(const LoadPlaylistResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadPlaylistResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_request()) {
    if (!this->request().IsInitialized()) return false;
  }
  for (int i = 0; i < track_size(); i++) {
    if (!this->track(i).IsInitialized()) return false;
  }
  return true;
}

void LoadPlaylistResponse::Swap(LoadPlaylistResponse* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    track_.Swap(&other->track_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadPlaylistResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadPlaylistResponse_descriptor_;
  metadata.reflection = LoadPlaylistResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncPlaylistRequest::kRequestFieldNumber;
const int SyncPlaylistRequest::kOfflineSyncFieldNumber;
#endif  // !_MSC_VER

SyncPlaylistRequest::SyncPlaylistRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncPlaylistRequest::InitAsDefaultInstance() {
  request_ = const_cast< ::pb::spotify::LoadPlaylistRequest*>(&::pb::spotify::LoadPlaylistRequest::default_instance());
}

SyncPlaylistRequest::SyncPlaylistRequest(const SyncPlaylistRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncPlaylistRequest::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  offline_sync_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncPlaylistRequest::~SyncPlaylistRequest() {
  SharedDtor();
}

void SyncPlaylistRequest::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
  }
}

void SyncPlaylistRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncPlaylistRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncPlaylistRequest_descriptor_;
}

const SyncPlaylistRequest& SyncPlaylistRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

SyncPlaylistRequest* SyncPlaylistRequest::default_instance_ = NULL;

SyncPlaylistRequest* SyncPlaylistRequest::New() const {
  return new SyncPlaylistRequest;
}

void SyncPlaylistRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::pb::spotify::LoadPlaylistRequest::Clear();
    }
    offline_sync_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncPlaylistRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.spotify.LoadPlaylistRequest request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offline_sync;
        break;
      }
      
      // required bool offline_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offline_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offline_sync_)));
          set_has_offline_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncPlaylistRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.spotify.LoadPlaylistRequest request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }
  
  // required bool offline_sync = 2;
  if (has_offline_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->offline_sync(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncPlaylistRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.spotify.LoadPlaylistRequest request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }
  
  // required bool offline_sync = 2;
  if (has_offline_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->offline_sync(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncPlaylistRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.spotify.LoadPlaylistRequest request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }
    
    // required bool offline_sync = 2;
    if (has_offline_sync()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncPlaylistRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncPlaylistRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncPlaylistRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncPlaylistRequest::MergeFrom(const SyncPlaylistRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::pb::spotify::LoadPlaylistRequest::MergeFrom(from.request());
    }
    if (from.has_offline_sync()) {
      set_offline_sync(from.offline_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncPlaylistRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPlaylistRequest::CopyFrom(const SyncPlaylistRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlaylistRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_request()) {
    if (!this->request().IsInitialized()) return false;
  }
  return true;
}

void SyncPlaylistRequest::Swap(SyncPlaylistRequest* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(offline_sync_, other->offline_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncPlaylistRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncPlaylistRequest_descriptor_;
  metadata.reflection = SyncPlaylistRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncPlaylistProgress::kRequestFieldNumber;
const int SyncPlaylistProgress::kSyncProgressFieldNumber;
#endif  // !_MSC_VER

SyncPlaylistProgress::SyncPlaylistProgress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncPlaylistProgress::InitAsDefaultInstance() {
  request_ = const_cast< ::pb::spotify::LoadPlaylistRequest*>(&::pb::spotify::LoadPlaylistRequest::default_instance());
}

SyncPlaylistProgress::SyncPlaylistProgress(const SyncPlaylistProgress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncPlaylistProgress::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  sync_progress_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncPlaylistProgress::~SyncPlaylistProgress() {
  SharedDtor();
}

void SyncPlaylistProgress::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
  }
}

void SyncPlaylistProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncPlaylistProgress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncPlaylistProgress_descriptor_;
}

const SyncPlaylistProgress& SyncPlaylistProgress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

SyncPlaylistProgress* SyncPlaylistProgress::default_instance_ = NULL;

SyncPlaylistProgress* SyncPlaylistProgress::New() const {
  return new SyncPlaylistProgress;
}

void SyncPlaylistProgress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::pb::spotify::LoadPlaylistRequest::Clear();
    }
    sync_progress_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncPlaylistProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.spotify.LoadPlaylistRequest request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sync_progress;
        break;
      }
      
      // required int32 sync_progress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sync_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sync_progress_)));
          set_has_sync_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncPlaylistProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.spotify.LoadPlaylistRequest request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }
  
  // required int32 sync_progress = 2;
  if (has_sync_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sync_progress(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncPlaylistProgress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.spotify.LoadPlaylistRequest request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }
  
  // required int32 sync_progress = 2;
  if (has_sync_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sync_progress(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncPlaylistProgress::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.spotify.LoadPlaylistRequest request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }
    
    // required int32 sync_progress = 2;
    if (has_sync_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sync_progress());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncPlaylistProgress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncPlaylistProgress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncPlaylistProgress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncPlaylistProgress::MergeFrom(const SyncPlaylistProgress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::pb::spotify::LoadPlaylistRequest::MergeFrom(from.request());
    }
    if (from.has_sync_progress()) {
      set_sync_progress(from.sync_progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncPlaylistProgress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPlaylistProgress::CopyFrom(const SyncPlaylistProgress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlaylistProgress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_request()) {
    if (!this->request().IsInitialized()) return false;
  }
  return true;
}

void SyncPlaylistProgress::Swap(SyncPlaylistProgress* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(sync_progress_, other->sync_progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncPlaylistProgress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncPlaylistProgress_descriptor_;
  metadata.reflection = SyncPlaylistProgress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaybackRequest::kTrackUriFieldNumber;
const int PlaybackRequest::kMediaPortFieldNumber;
#endif  // !_MSC_VER

PlaybackRequest::PlaybackRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaybackRequest::InitAsDefaultInstance() {
}

PlaybackRequest::PlaybackRequest(const PlaybackRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaybackRequest::SharedCtor() {
  _cached_size_ = 0;
  track_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  media_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaybackRequest::~PlaybackRequest() {
  SharedDtor();
}

void PlaybackRequest::SharedDtor() {
  if (track_uri_ != &::google::protobuf::internal::kEmptyString) {
    delete track_uri_;
  }
  if (this != default_instance_) {
  }
}

void PlaybackRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaybackRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaybackRequest_descriptor_;
}

const PlaybackRequest& PlaybackRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

PlaybackRequest* PlaybackRequest::default_instance_ = NULL;

PlaybackRequest* PlaybackRequest::New() const {
  return new PlaybackRequest;
}

void PlaybackRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_track_uri()) {
      if (track_uri_ != &::google::protobuf::internal::kEmptyString) {
        track_uri_->clear();
      }
    }
    media_port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaybackRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string track_uri = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->track_uri().data(), this->track_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_media_port;
        break;
      }
      
      // required int32 media_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_media_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &media_port_)));
          set_has_media_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaybackRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string track_uri = 1;
  if (has_track_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->track_uri().data(), this->track_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->track_uri(), output);
  }
  
  // required int32 media_port = 2;
  if (has_media_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->media_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaybackRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string track_uri = 1;
  if (has_track_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->track_uri().data(), this->track_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->track_uri(), target);
  }
  
  // required int32 media_port = 2;
  if (has_media_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->media_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaybackRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string track_uri = 1;
    if (has_track_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track_uri());
    }
    
    // required int32 media_port = 2;
    if (has_media_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->media_port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaybackRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaybackRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaybackRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaybackRequest::MergeFrom(const PlaybackRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_track_uri()) {
      set_track_uri(from.track_uri());
    }
    if (from.has_media_port()) {
      set_media_port(from.media_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaybackRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaybackRequest::CopyFrom(const PlaybackRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PlaybackRequest::Swap(PlaybackRequest* other) {
  if (other != this) {
    std::swap(track_uri_, other->track_uri_);
    std::swap(media_port_, other->media_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaybackRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaybackRequest_descriptor_;
  metadata.reflection = PlaybackRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaybackError::kErrorFieldNumber;
#endif  // !_MSC_VER

PlaybackError::PlaybackError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaybackError::InitAsDefaultInstance() {
}

PlaybackError::PlaybackError(const PlaybackError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaybackError::SharedCtor() {
  _cached_size_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaybackError::~PlaybackError() {
  SharedDtor();
}

void PlaybackError::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void PlaybackError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaybackError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaybackError_descriptor_;
}

const PlaybackError& PlaybackError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

PlaybackError* PlaybackError::default_instance_ = NULL;

PlaybackError* PlaybackError::New() const {
  return new PlaybackError;
}

void PlaybackError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaybackError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaybackError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaybackError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaybackError::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaybackError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaybackError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaybackError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaybackError::MergeFrom(const PlaybackError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaybackError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaybackError::CopyFrom(const PlaybackError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackError::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PlaybackError::Swap(PlaybackError* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaybackError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaybackError_descriptor_;
  metadata.reflection = PlaybackError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchRequest::kQueryFieldNumber;
const int SearchRequest::kLimitFieldNumber;
const int SearchRequest::kLimitAlbumFieldNumber;
#endif  // !_MSC_VER

SearchRequest::SearchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchRequest::InitAsDefaultInstance() {
}

SearchRequest::SearchRequest(const SearchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchRequest::SharedCtor() {
  _cached_size_ = 0;
  query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limit_ = 250;
  limit_album_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchRequest::~SearchRequest() {
  SharedDtor();
}

void SearchRequest::SharedDtor() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    delete query_;
  }
  if (this != default_instance_) {
  }
}

void SearchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchRequest_descriptor_;
}

const SearchRequest& SearchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

SearchRequest* SearchRequest::default_instance_ = NULL;

SearchRequest* SearchRequest::New() const {
  return new SearchRequest;
}

void SearchRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_query()) {
      if (query_ != &::google::protobuf::internal::kEmptyString) {
        query_->clear();
      }
    }
    limit_ = 250;
    limit_album_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }
      
      // optional int32 limit = 2 [default = 250];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_limit_album;
        break;
      }
      
      // optional int32 limit_album = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_album:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_album_)));
          set_has_limit_album();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->query(), output);
  }
  
  // optional int32 limit = 2 [default = 250];
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit(), output);
  }
  
  // optional int32 limit_album = 3 [default = 0];
  if (has_limit_album()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit_album(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }
  
  // optional int32 limit = 2 [default = 250];
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit(), target);
  }
  
  // optional int32 limit_album = 3 [default = 0];
  if (has_limit_album()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit_album(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }
    
    // optional int32 limit = 2 [default = 250];
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }
    
    // optional int32 limit_album = 3 [default = 0];
    if (has_limit_album()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_album());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchRequest::MergeFrom(const SearchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      set_query(from.query());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_limit_album()) {
      set_limit_album(from.limit_album());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SearchRequest::Swap(SearchRequest* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(limit_, other->limit_);
    std::swap(limit_album_, other->limit_album_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchRequest_descriptor_;
  metadata.reflection = SearchRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchResponse::kRequestFieldNumber;
const int SearchResponse::kResultFieldNumber;
const int SearchResponse::kTotalTracksFieldNumber;
const int SearchResponse::kDidYouMeanFieldNumber;
const int SearchResponse::kErrorFieldNumber;
const int SearchResponse::kAlbumFieldNumber;
#endif  // !_MSC_VER

SearchResponse::SearchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchResponse::InitAsDefaultInstance() {
  request_ = const_cast< ::pb::spotify::SearchRequest*>(&::pb::spotify::SearchRequest::default_instance());
}

SearchResponse::SearchResponse(const SearchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchResponse::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  total_tracks_ = 0;
  did_you_mean_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchResponse::~SearchResponse() {
  SharedDtor();
}

void SearchResponse::SharedDtor() {
  if (did_you_mean_ != &::google::protobuf::internal::kEmptyString) {
    delete did_you_mean_;
  }
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
    delete request_;
  }
}

void SearchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchResponse_descriptor_;
}

const SearchResponse& SearchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

SearchResponse* SearchResponse::default_instance_ = NULL;

SearchResponse* SearchResponse::New() const {
  return new SearchResponse;
}

void SearchResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::pb::spotify::SearchRequest::Clear();
    }
    total_tracks_ = 0;
    if (has_did_you_mean()) {
      if (did_you_mean_ != &::google::protobuf::internal::kEmptyString) {
        did_you_mean_->clear();
      }
    }
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  result_.Clear();
  album_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.spotify.SearchRequest request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }
      
      // repeated .pb.spotify.Track result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectTag(24)) goto parse_total_tracks;
        break;
      }
      
      // optional int32 total_tracks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_tracks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_tracks_)));
          set_has_total_tracks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_did_you_mean;
        break;
      }
      
      // optional string did_you_mean = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_did_you_mean:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_did_you_mean()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->did_you_mean().data(), this->did_you_mean().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_error;
        break;
      }
      
      // optional string error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_album;
        break;
      }
      
      // repeated .pb.spotify.Album album = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_album()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_album;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.spotify.SearchRequest request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }
  
  // repeated .pb.spotify.Track result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }
  
  // optional int32 total_tracks = 3;
  if (has_total_tracks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_tracks(), output);
  }
  
  // optional string did_you_mean = 4;
  if (has_did_you_mean()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->did_you_mean().data(), this->did_you_mean().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->did_you_mean(), output);
  }
  
  // optional string error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->error(), output);
  }
  
  // repeated .pb.spotify.Album album = 7;
  for (int i = 0; i < this->album_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->album(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.spotify.SearchRequest request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }
  
  // repeated .pb.spotify.Track result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(i), target);
  }
  
  // optional int32 total_tracks = 3;
  if (has_total_tracks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_tracks(), target);
  }
  
  // optional string did_you_mean = 4;
  if (has_did_you_mean()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->did_you_mean().data(), this->did_you_mean().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->did_you_mean(), target);
  }
  
  // optional string error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->error(), target);
  }
  
  // repeated .pb.spotify.Album album = 7;
  for (int i = 0; i < this->album_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->album(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.spotify.SearchRequest request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }
    
    // optional int32 total_tracks = 3;
    if (has_total_tracks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_tracks());
    }
    
    // optional string did_you_mean = 4;
    if (has_did_you_mean()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->did_you_mean());
    }
    
    // optional string error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }
    
  }
  // repeated .pb.spotify.Track result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }
  
  // repeated .pb.spotify.Album album = 7;
  total_size += 1 * this->album_size();
  for (int i = 0; i < this->album_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->album(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchResponse::MergeFrom(const SearchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  album_.MergeFrom(from.album_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::pb::spotify::SearchRequest::MergeFrom(from.request());
    }
    if (from.has_total_tracks()) {
      set_total_tracks(from.total_tracks());
    }
    if (from.has_did_you_mean()) {
      set_did_you_mean(from.did_you_mean());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResponse::CopyFrom(const SearchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_request()) {
    if (!this->request().IsInitialized()) return false;
  }
  for (int i = 0; i < result_size(); i++) {
    if (!this->result(i).IsInitialized()) return false;
  }
  for (int i = 0; i < album_size(); i++) {
    if (!this->album(i).IsInitialized()) return false;
  }
  return true;
}

void SearchResponse::Swap(SearchResponse* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    result_.Swap(&other->result_);
    std::swap(total_tracks_, other->total_tracks_);
    std::swap(did_you_mean_, other->did_you_mean_);
    std::swap(error_, other->error_);
    album_.Swap(&other->album_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchResponse_descriptor_;
  metadata.reflection = SearchResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageRequest::kIdFieldNumber;
#endif  // !_MSC_VER

ImageRequest::ImageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageRequest::InitAsDefaultInstance() {
}

ImageRequest::ImageRequest(const ImageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageRequest::~ImageRequest() {
  SharedDtor();
}

void ImageRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void ImageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageRequest_descriptor_;
}

const ImageRequest& ImageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

ImageRequest* ImageRequest::default_instance_ = NULL;

ImageRequest* ImageRequest::New() const {
  return new ImageRequest;
}

void ImageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageRequest::MergeFrom(const ImageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageRequest::CopyFrom(const ImageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ImageRequest::Swap(ImageRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageRequest_descriptor_;
  metadata.reflection = ImageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageResponse::kIdFieldNumber;
const int ImageResponse::kDataFieldNumber;
#endif  // !_MSC_VER

ImageResponse::ImageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageResponse::InitAsDefaultInstance() {
}

ImageResponse::ImageResponse(const ImageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageResponse::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageResponse::~ImageResponse() {
  SharedDtor();
}

void ImageResponse::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ImageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageResponse_descriptor_;
}

const ImageResponse& ImageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

ImageResponse* ImageResponse::default_instance_ = NULL;

ImageResponse* ImageResponse::New() const {
  return new ImageResponse;
}

void ImageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageResponse::MergeFrom(const ImageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageResponse::CopyFrom(const ImageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ImageResponse::Swap(ImageResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageResponse_descriptor_;
  metadata.reflection = ImageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BrowseAlbumRequest::kUriFieldNumber;
#endif  // !_MSC_VER

BrowseAlbumRequest::BrowseAlbumRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BrowseAlbumRequest::InitAsDefaultInstance() {
}

BrowseAlbumRequest::BrowseAlbumRequest(const BrowseAlbumRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BrowseAlbumRequest::SharedCtor() {
  _cached_size_ = 0;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrowseAlbumRequest::~BrowseAlbumRequest() {
  SharedDtor();
}

void BrowseAlbumRequest::SharedDtor() {
  if (uri_ != &::google::protobuf::internal::kEmptyString) {
    delete uri_;
  }
  if (this != default_instance_) {
  }
}

void BrowseAlbumRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrowseAlbumRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrowseAlbumRequest_descriptor_;
}

const BrowseAlbumRequest& BrowseAlbumRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

BrowseAlbumRequest* BrowseAlbumRequest::default_instance_ = NULL;

BrowseAlbumRequest* BrowseAlbumRequest::New() const {
  return new BrowseAlbumRequest;
}

void BrowseAlbumRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::kEmptyString) {
        uri_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrowseAlbumRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uri = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BrowseAlbumRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uri(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BrowseAlbumRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BrowseAlbumRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrowseAlbumRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrowseAlbumRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrowseAlbumRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrowseAlbumRequest::MergeFrom(const BrowseAlbumRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_uri(from.uri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrowseAlbumRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrowseAlbumRequest::CopyFrom(const BrowseAlbumRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrowseAlbumRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BrowseAlbumRequest::Swap(BrowseAlbumRequest* other) {
  if (other != this) {
    std::swap(uri_, other->uri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrowseAlbumRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrowseAlbumRequest_descriptor_;
  metadata.reflection = BrowseAlbumRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BrowseAlbumResponse::kUriFieldNumber;
const int BrowseAlbumResponse::kTrackFieldNumber;
#endif  // !_MSC_VER

BrowseAlbumResponse::BrowseAlbumResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BrowseAlbumResponse::InitAsDefaultInstance() {
}

BrowseAlbumResponse::BrowseAlbumResponse(const BrowseAlbumResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BrowseAlbumResponse::SharedCtor() {
  _cached_size_ = 0;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrowseAlbumResponse::~BrowseAlbumResponse() {
  SharedDtor();
}

void BrowseAlbumResponse::SharedDtor() {
  if (uri_ != &::google::protobuf::internal::kEmptyString) {
    delete uri_;
  }
  if (this != default_instance_) {
  }
}

void BrowseAlbumResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrowseAlbumResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrowseAlbumResponse_descriptor_;
}

const BrowseAlbumResponse& BrowseAlbumResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

BrowseAlbumResponse* BrowseAlbumResponse::default_instance_ = NULL;

BrowseAlbumResponse* BrowseAlbumResponse::New() const {
  return new BrowseAlbumResponse;
}

void BrowseAlbumResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::kEmptyString) {
        uri_->clear();
      }
    }
  }
  track_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrowseAlbumResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uri = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_track;
        break;
      }
      
      // repeated .pb.spotify.Track track = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_track;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BrowseAlbumResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uri(), output);
  }
  
  // repeated .pb.spotify.Track track = 2;
  for (int i = 0; i < this->track_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->track(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BrowseAlbumResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }
  
  // repeated .pb.spotify.Track track = 2;
  for (int i = 0; i < this->track_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->track(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BrowseAlbumResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }
    
  }
  // repeated .pb.spotify.Track track = 2;
  total_size += 1 * this->track_size();
  for (int i = 0; i < this->track_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->track(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrowseAlbumResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrowseAlbumResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrowseAlbumResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrowseAlbumResponse::MergeFrom(const BrowseAlbumResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  track_.MergeFrom(from.track_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_uri(from.uri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrowseAlbumResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrowseAlbumResponse::CopyFrom(const BrowseAlbumResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrowseAlbumResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < track_size(); i++) {
    if (!this->track(i).IsInitialized()) return false;
  }
  return true;
}

void BrowseAlbumResponse::Swap(BrowseAlbumResponse* other) {
  if (other != this) {
    std::swap(uri_, other->uri_);
    track_.Swap(&other->track_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrowseAlbumResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrowseAlbumResponse_descriptor_;
  metadata.reflection = BrowseAlbumResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BrowseToplistRequest_ToplistType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrowseToplistRequest_ToplistType_descriptor_;
}
bool BrowseToplistRequest_ToplistType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BrowseToplistRequest_ToplistType BrowseToplistRequest::Artists;
const BrowseToplistRequest_ToplistType BrowseToplistRequest::Albums;
const BrowseToplistRequest_ToplistType BrowseToplistRequest::Tracks;
const BrowseToplistRequest_ToplistType BrowseToplistRequest::ToplistType_MIN;
const BrowseToplistRequest_ToplistType BrowseToplistRequest::ToplistType_MAX;
const int BrowseToplistRequest::ToplistType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BrowseToplistRequest_Region_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrowseToplistRequest_Region_descriptor_;
}
bool BrowseToplistRequest_Region_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BrowseToplistRequest_Region BrowseToplistRequest::Everywhere;
const BrowseToplistRequest_Region BrowseToplistRequest::User;
const BrowseToplistRequest_Region BrowseToplistRequest::Region_MIN;
const BrowseToplistRequest_Region BrowseToplistRequest::Region_MAX;
const int BrowseToplistRequest::Region_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BrowseToplistRequest::kTypeFieldNumber;
const int BrowseToplistRequest::kRegionFieldNumber;
const int BrowseToplistRequest::kUsernameFieldNumber;
#endif  // !_MSC_VER

BrowseToplistRequest::BrowseToplistRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BrowseToplistRequest::InitAsDefaultInstance() {
}

BrowseToplistRequest::BrowseToplistRequest(const BrowseToplistRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BrowseToplistRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  region_ = 1;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrowseToplistRequest::~BrowseToplistRequest() {
  SharedDtor();
}

void BrowseToplistRequest::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void BrowseToplistRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrowseToplistRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrowseToplistRequest_descriptor_;
}

const BrowseToplistRequest& BrowseToplistRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

BrowseToplistRequest* BrowseToplistRequest::default_instance_ = NULL;

BrowseToplistRequest* BrowseToplistRequest::New() const {
  return new BrowseToplistRequest;
}

void BrowseToplistRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    region_ = 1;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrowseToplistRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.spotify.BrowseToplistRequest.ToplistType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::spotify::BrowseToplistRequest_ToplistType_IsValid(value)) {
            set_type(static_cast< ::pb::spotify::BrowseToplistRequest_ToplistType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_region;
        break;
      }
      
      // optional .pb.spotify.BrowseToplistRequest.Region region = 2 [default = Everywhere];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::spotify::BrowseToplistRequest_Region_IsValid(value)) {
            set_region(static_cast< ::pb::spotify::BrowseToplistRequest_Region >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_username;
        break;
      }
      
      // optional string username = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BrowseToplistRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.spotify.BrowseToplistRequest.ToplistType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .pb.spotify.BrowseToplistRequest.Region region = 2 [default = Everywhere];
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->region(), output);
  }
  
  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->username(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BrowseToplistRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.spotify.BrowseToplistRequest.ToplistType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .pb.spotify.BrowseToplistRequest.Region region = 2 [default = Everywhere];
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->region(), target);
  }
  
  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BrowseToplistRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.spotify.BrowseToplistRequest.ToplistType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .pb.spotify.BrowseToplistRequest.Region region = 2 [default = Everywhere];
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->region());
    }
    
    // optional string username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrowseToplistRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrowseToplistRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrowseToplistRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrowseToplistRequest::MergeFrom(const BrowseToplistRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrowseToplistRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrowseToplistRequest::CopyFrom(const BrowseToplistRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrowseToplistRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BrowseToplistRequest::Swap(BrowseToplistRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(region_, other->region_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrowseToplistRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrowseToplistRequest_descriptor_;
  metadata.reflection = BrowseToplistRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BrowseToplistResponse::kRequestFieldNumber;
const int BrowseToplistResponse::kTrackFieldNumber;
const int BrowseToplistResponse::kAlbumFieldNumber;
#endif  // !_MSC_VER

BrowseToplistResponse::BrowseToplistResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BrowseToplistResponse::InitAsDefaultInstance() {
  request_ = const_cast< ::pb::spotify::BrowseToplistRequest*>(&::pb::spotify::BrowseToplistRequest::default_instance());
}

BrowseToplistResponse::BrowseToplistResponse(const BrowseToplistResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BrowseToplistResponse::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrowseToplistResponse::~BrowseToplistResponse() {
  SharedDtor();
}

void BrowseToplistResponse::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
  }
}

void BrowseToplistResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrowseToplistResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrowseToplistResponse_descriptor_;
}

const BrowseToplistResponse& BrowseToplistResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

BrowseToplistResponse* BrowseToplistResponse::default_instance_ = NULL;

BrowseToplistResponse* BrowseToplistResponse::New() const {
  return new BrowseToplistResponse;
}

void BrowseToplistResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::pb::spotify::BrowseToplistRequest::Clear();
    }
  }
  track_.Clear();
  album_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrowseToplistResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.spotify.BrowseToplistRequest request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_track;
        break;
      }
      
      // repeated .pb.spotify.Track track = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_track;
        if (input->ExpectTag(26)) goto parse_album;
        break;
      }
      
      // repeated .pb.spotify.Album album = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_album()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_album;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BrowseToplistResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.spotify.BrowseToplistRequest request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }
  
  // repeated .pb.spotify.Track track = 2;
  for (int i = 0; i < this->track_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->track(i), output);
  }
  
  // repeated .pb.spotify.Album album = 3;
  for (int i = 0; i < this->album_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->album(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BrowseToplistResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.spotify.BrowseToplistRequest request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }
  
  // repeated .pb.spotify.Track track = 2;
  for (int i = 0; i < this->track_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->track(i), target);
  }
  
  // repeated .pb.spotify.Album album = 3;
  for (int i = 0; i < this->album_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->album(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BrowseToplistResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.spotify.BrowseToplistRequest request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }
    
  }
  // repeated .pb.spotify.Track track = 2;
  total_size += 1 * this->track_size();
  for (int i = 0; i < this->track_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->track(i));
  }
  
  // repeated .pb.spotify.Album album = 3;
  total_size += 1 * this->album_size();
  for (int i = 0; i < this->album_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->album(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrowseToplistResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrowseToplistResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrowseToplistResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrowseToplistResponse::MergeFrom(const BrowseToplistResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  track_.MergeFrom(from.track_);
  album_.MergeFrom(from.album_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::pb::spotify::BrowseToplistRequest::MergeFrom(from.request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrowseToplistResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrowseToplistResponse::CopyFrom(const BrowseToplistResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrowseToplistResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_request()) {
    if (!this->request().IsInitialized()) return false;
  }
  for (int i = 0; i < track_size(); i++) {
    if (!this->track(i).IsInitialized()) return false;
  }
  for (int i = 0; i < album_size(); i++) {
    if (!this->album(i).IsInitialized()) return false;
  }
  return true;
}

void BrowseToplistResponse::Swap(BrowseToplistResponse* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    track_.Swap(&other->track_);
    album_.Swap(&other->album_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrowseToplistResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrowseToplistResponse_descriptor_;
  metadata.reflection = BrowseToplistResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeekRequest::kOffsetBytesFieldNumber;
#endif  // !_MSC_VER

SeekRequest::SeekRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SeekRequest::InitAsDefaultInstance() {
}

SeekRequest::SeekRequest(const SeekRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SeekRequest::SharedCtor() {
  _cached_size_ = 0;
  offset_bytes_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeekRequest::~SeekRequest() {
  SharedDtor();
}

void SeekRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeekRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeekRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeekRequest_descriptor_;
}

const SeekRequest& SeekRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

SeekRequest* SeekRequest::default_instance_ = NULL;

SeekRequest* SeekRequest::New() const {
  return new SeekRequest;
}

void SeekRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_bytes_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeekRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 offset_bytes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_bytes_)));
          set_has_offset_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeekRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 offset_bytes = 1;
  if (has_offset_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->offset_bytes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeekRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 offset_bytes = 1;
  if (has_offset_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->offset_bytes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeekRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 offset_bytes = 1;
    if (has_offset_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset_bytes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeekRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeekRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeekRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeekRequest::MergeFrom(const SeekRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset_bytes()) {
      set_offset_bytes(from.offset_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeekRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeekRequest::CopyFrom(const SeekRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekRequest::IsInitialized() const {
  
  return true;
}

void SeekRequest::Swap(SeekRequest* other) {
  if (other != this) {
    std::swap(offset_bytes_, other->offset_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeekRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeekRequest_descriptor_;
  metadata.reflection = SeekRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaybackSettings::kBitrateFieldNumber;
const int PlaybackSettings::kVolumeNormalisationFieldNumber;
#endif  // !_MSC_VER

PlaybackSettings::PlaybackSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaybackSettings::InitAsDefaultInstance() {
}

PlaybackSettings::PlaybackSettings(const PlaybackSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaybackSettings::SharedCtor() {
  _cached_size_ = 0;
  bitrate_ = 3;
  volume_normalisation_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaybackSettings::~PlaybackSettings() {
  SharedDtor();
}

void PlaybackSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlaybackSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaybackSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaybackSettings_descriptor_;
}

const PlaybackSettings& PlaybackSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

PlaybackSettings* PlaybackSettings::default_instance_ = NULL;

PlaybackSettings* PlaybackSettings::New() const {
  return new PlaybackSettings;
}

void PlaybackSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bitrate_ = 3;
    volume_normalisation_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaybackSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.spotify.Bitrate bitrate = 1 [default = Bitrate320k];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (pb::spotify::Bitrate_IsValid(value)) {
            set_bitrate(static_cast< pb::spotify::Bitrate >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_volume_normalisation;
        break;
      }
      
      // optional bool volume_normalisation = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume_normalisation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &volume_normalisation_)));
          set_has_volume_normalisation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaybackSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.spotify.Bitrate bitrate = 1 [default = Bitrate320k];
  if (has_bitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->bitrate(), output);
  }
  
  // optional bool volume_normalisation = 2 [default = false];
  if (has_volume_normalisation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->volume_normalisation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaybackSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.spotify.Bitrate bitrate = 1 [default = Bitrate320k];
  if (has_bitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->bitrate(), target);
  }
  
  // optional bool volume_normalisation = 2 [default = false];
  if (has_volume_normalisation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->volume_normalisation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaybackSettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.spotify.Bitrate bitrate = 1 [default = Bitrate320k];
    if (has_bitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bitrate());
    }
    
    // optional bool volume_normalisation = 2 [default = false];
    if (has_volume_normalisation()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaybackSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaybackSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaybackSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaybackSettings::MergeFrom(const PlaybackSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bitrate()) {
      set_bitrate(from.bitrate());
    }
    if (from.has_volume_normalisation()) {
      set_volume_normalisation(from.volume_normalisation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaybackSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaybackSettings::CopyFrom(const PlaybackSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackSettings::IsInitialized() const {
  
  return true;
}

void PlaybackSettings::Swap(PlaybackSettings* other) {
  if (other != this) {
    std::swap(bitrate_, other->bitrate_);
    std::swap(volume_normalisation_, other->volume_normalisation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaybackSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaybackSettings_descriptor_;
  metadata.reflection = PlaybackSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Message::kIdFieldNumber;
const int Message::kLoginRequestFieldNumber;
const int Message::kLoginResponseFieldNumber;
const int Message::kPlaylistsUpdatedFieldNumber;
const int Message::kLoadPlaylistRequestFieldNumber;
const int Message::kLoadPlaylistResponseFieldNumber;
const int Message::kPlaybackRequestFieldNumber;
const int Message::kPlaybackErrorFieldNumber;
const int Message::kSearchRequestFieldNumber;
const int Message::kSearchResponseFieldNumber;
const int Message::kImageRequestFieldNumber;
const int Message::kImageResponseFieldNumber;
const int Message::kSyncPlaylistRequestFieldNumber;
const int Message::kSyncPlaylistProgressFieldNumber;
const int Message::kBrowseAlbumRequestFieldNumber;
const int Message::kBrowseAlbumResponseFieldNumber;
const int Message::kSeekRequestFieldNumber;
const int Message::kSetPlaybackSettingsRequestFieldNumber;
const int Message::kBrowseToplistRequestFieldNumber;
const int Message::kBrowseToplistResponseFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
  login_request_ = const_cast< ::pb::spotify::LoginRequest*>(&::pb::spotify::LoginRequest::default_instance());
  login_response_ = const_cast< ::pb::spotify::LoginResponse*>(&::pb::spotify::LoginResponse::default_instance());
  playlists_updated_ = const_cast< ::pb::spotify::Playlists*>(&::pb::spotify::Playlists::default_instance());
  load_playlist_request_ = const_cast< ::pb::spotify::LoadPlaylistRequest*>(&::pb::spotify::LoadPlaylistRequest::default_instance());
  load_playlist_response_ = const_cast< ::pb::spotify::LoadPlaylistResponse*>(&::pb::spotify::LoadPlaylistResponse::default_instance());
  playback_request_ = const_cast< ::pb::spotify::PlaybackRequest*>(&::pb::spotify::PlaybackRequest::default_instance());
  playback_error_ = const_cast< ::pb::spotify::PlaybackError*>(&::pb::spotify::PlaybackError::default_instance());
  search_request_ = const_cast< ::pb::spotify::SearchRequest*>(&::pb::spotify::SearchRequest::default_instance());
  search_response_ = const_cast< ::pb::spotify::SearchResponse*>(&::pb::spotify::SearchResponse::default_instance());
  image_request_ = const_cast< ::pb::spotify::ImageRequest*>(&::pb::spotify::ImageRequest::default_instance());
  image_response_ = const_cast< ::pb::spotify::ImageResponse*>(&::pb::spotify::ImageResponse::default_instance());
  sync_playlist_request_ = const_cast< ::pb::spotify::SyncPlaylistRequest*>(&::pb::spotify::SyncPlaylistRequest::default_instance());
  sync_playlist_progress_ = const_cast< ::pb::spotify::SyncPlaylistProgress*>(&::pb::spotify::SyncPlaylistProgress::default_instance());
  browse_album_request_ = const_cast< ::pb::spotify::BrowseAlbumRequest*>(&::pb::spotify::BrowseAlbumRequest::default_instance());
  browse_album_response_ = const_cast< ::pb::spotify::BrowseAlbumResponse*>(&::pb::spotify::BrowseAlbumResponse::default_instance());
  seek_request_ = const_cast< ::pb::spotify::SeekRequest*>(&::pb::spotify::SeekRequest::default_instance());
  set_playback_settings_request_ = const_cast< ::pb::spotify::PlaybackSettings*>(&::pb::spotify::PlaybackSettings::default_instance());
  browse_toplist_request_ = const_cast< ::pb::spotify::BrowseToplistRequest*>(&::pb::spotify::BrowseToplistRequest::default_instance());
  browse_toplist_response_ = const_cast< ::pb::spotify::BrowseToplistResponse*>(&::pb::spotify::BrowseToplistResponse::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  login_request_ = NULL;
  login_response_ = NULL;
  playlists_updated_ = NULL;
  load_playlist_request_ = NULL;
  load_playlist_response_ = NULL;
  playback_request_ = NULL;
  playback_error_ = NULL;
  search_request_ = NULL;
  search_response_ = NULL;
  image_request_ = NULL;
  image_response_ = NULL;
  sync_playlist_request_ = NULL;
  sync_playlist_progress_ = NULL;
  browse_album_request_ = NULL;
  browse_album_response_ = NULL;
  seek_request_ = NULL;
  set_playback_settings_request_ = NULL;
  browse_toplist_request_ = NULL;
  browse_toplist_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete login_request_;
    delete login_response_;
    delete playlists_updated_;
    delete load_playlist_request_;
    delete load_playlist_response_;
    delete playback_request_;
    delete playback_error_;
    delete search_request_;
    delete search_response_;
    delete image_request_;
    delete image_response_;
    delete sync_playlist_request_;
    delete sync_playlist_progress_;
    delete browse_album_request_;
    delete browse_album_response_;
    delete seek_request_;
    delete set_playback_settings_request_;
    delete browse_toplist_request_;
    delete browse_toplist_response_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spotifymessages_2eproto();  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_login_request()) {
      if (login_request_ != NULL) login_request_->::pb::spotify::LoginRequest::Clear();
    }
    if (has_login_response()) {
      if (login_response_ != NULL) login_response_->::pb::spotify::LoginResponse::Clear();
    }
    if (has_playlists_updated()) {
      if (playlists_updated_ != NULL) playlists_updated_->::pb::spotify::Playlists::Clear();
    }
    if (has_load_playlist_request()) {
      if (load_playlist_request_ != NULL) load_playlist_request_->::pb::spotify::LoadPlaylistRequest::Clear();
    }
    if (has_load_playlist_response()) {
      if (load_playlist_response_ != NULL) load_playlist_response_->::pb::spotify::LoadPlaylistResponse::Clear();
    }
    if (has_playback_request()) {
      if (playback_request_ != NULL) playback_request_->::pb::spotify::PlaybackRequest::Clear();
    }
    if (has_playback_error()) {
      if (playback_error_ != NULL) playback_error_->::pb::spotify::PlaybackError::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_search_request()) {
      if (search_request_ != NULL) search_request_->::pb::spotify::SearchRequest::Clear();
    }
    if (has_search_response()) {
      if (search_response_ != NULL) search_response_->::pb::spotify::SearchResponse::Clear();
    }
    if (has_image_request()) {
      if (image_request_ != NULL) image_request_->::pb::spotify::ImageRequest::Clear();
    }
    if (has_image_response()) {
      if (image_response_ != NULL) image_response_->::pb::spotify::ImageResponse::Clear();
    }
    if (has_sync_playlist_request()) {
      if (sync_playlist_request_ != NULL) sync_playlist_request_->::pb::spotify::SyncPlaylistRequest::Clear();
    }
    if (has_sync_playlist_progress()) {
      if (sync_playlist_progress_ != NULL) sync_playlist_progress_->::pb::spotify::SyncPlaylistProgress::Clear();
    }
    if (has_browse_album_request()) {
      if (browse_album_request_ != NULL) browse_album_request_->::pb::spotify::BrowseAlbumRequest::Clear();
    }
    if (has_browse_album_response()) {
      if (browse_album_response_ != NULL) browse_album_response_->::pb::spotify::BrowseAlbumResponse::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_seek_request()) {
      if (seek_request_ != NULL) seek_request_->::pb::spotify::SeekRequest::Clear();
    }
    if (has_set_playback_settings_request()) {
      if (set_playback_settings_request_ != NULL) set_playback_settings_request_->::pb::spotify::PlaybackSettings::Clear();
    }
    if (has_browse_toplist_request()) {
      if (browse_toplist_request_ != NULL) browse_toplist_request_->::pb::spotify::BrowseToplistRequest::Clear();
    }
    if (has_browse_toplist_response()) {
      if (browse_toplist_response_ != NULL) browse_toplist_response_->::pb::spotify::BrowseToplistResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.spotify.LoginRequest login_request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_login_response;
        break;
      }
      
      // optional .pb.spotify.LoginResponse login_response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playlists_updated;
        break;
      }
      
      // optional .pb.spotify.Playlists playlists_updated = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playlists_updated:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playlists_updated()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_load_playlist_request;
        break;
      }
      
      // optional .pb.spotify.LoadPlaylistRequest load_playlist_request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_load_playlist_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_load_playlist_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_load_playlist_response;
        break;
      }
      
      // optional .pb.spotify.LoadPlaylistResponse load_playlist_response = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_load_playlist_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_load_playlist_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playback_request;
        break;
      }
      
      // optional .pb.spotify.PlaybackRequest playback_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playback_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playback_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_playback_error;
        break;
      }
      
      // optional .pb.spotify.PlaybackError playback_error = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playback_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playback_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_search_request;
        break;
      }
      
      // optional .pb.spotify.SearchRequest search_request = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_search_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_search_response;
        break;
      }
      
      // optional .pb.spotify.SearchResponse search_response = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_search_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_image_request;
        break;
      }
      
      // optional .pb.spotify.ImageRequest image_request = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_image_response;
        break;
      }
      
      // optional .pb.spotify.ImageResponse image_response = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sync_playlist_request;
        break;
      }
      
      // optional .pb.spotify.SyncPlaylistRequest sync_playlist_request = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync_playlist_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync_playlist_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_sync_playlist_progress;
        break;
      }
      
      // optional .pb.spotify.SyncPlaylistProgress sync_playlist_progress = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync_playlist_progress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync_playlist_progress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_browse_album_request;
        break;
      }
      
      // optional .pb.spotify.BrowseAlbumRequest browse_album_request = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_browse_album_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_browse_album_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_browse_album_response;
        break;
      }
      
      // optional .pb.spotify.BrowseAlbumResponse browse_album_response = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_browse_album_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_browse_album_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_seek_request;
        break;
      }
      
      // optional .pb.spotify.SeekRequest seek_request = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seek_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seek_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_set_playback_settings_request;
        break;
      }
      
      // optional .pb.spotify.PlaybackSettings set_playback_settings_request = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_set_playback_settings_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_playback_settings_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_id;
        break;
      }
      
      // optional int32 id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_browse_toplist_request;
        break;
      }
      
      // optional .pb.spotify.BrowseToplistRequest browse_toplist_request = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_browse_toplist_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_browse_toplist_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_browse_toplist_response;
        break;
      }
      
      // optional .pb.spotify.BrowseToplistResponse browse_toplist_response = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_browse_toplist_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_browse_toplist_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.spotify.LoginRequest login_request = 1;
  if (has_login_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->login_request(), output);
  }
  
  // optional .pb.spotify.LoginResponse login_response = 2;
  if (has_login_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->login_response(), output);
  }
  
  // optional .pb.spotify.Playlists playlists_updated = 3;
  if (has_playlists_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playlists_updated(), output);
  }
  
  // optional .pb.spotify.LoadPlaylistRequest load_playlist_request = 4;
  if (has_load_playlist_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->load_playlist_request(), output);
  }
  
  // optional .pb.spotify.LoadPlaylistResponse load_playlist_response = 5;
  if (has_load_playlist_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->load_playlist_response(), output);
  }
  
  // optional .pb.spotify.PlaybackRequest playback_request = 6;
  if (has_playback_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->playback_request(), output);
  }
  
  // optional .pb.spotify.PlaybackError playback_error = 7;
  if (has_playback_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->playback_error(), output);
  }
  
  // optional .pb.spotify.SearchRequest search_request = 8;
  if (has_search_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->search_request(), output);
  }
  
  // optional .pb.spotify.SearchResponse search_response = 9;
  if (has_search_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->search_response(), output);
  }
  
  // optional .pb.spotify.ImageRequest image_request = 10;
  if (has_image_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->image_request(), output);
  }
  
  // optional .pb.spotify.ImageResponse image_response = 11;
  if (has_image_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->image_response(), output);
  }
  
  // optional .pb.spotify.SyncPlaylistRequest sync_playlist_request = 12;
  if (has_sync_playlist_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->sync_playlist_request(), output);
  }
  
  // optional .pb.spotify.SyncPlaylistProgress sync_playlist_progress = 13;
  if (has_sync_playlist_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->sync_playlist_progress(), output);
  }
  
  // optional .pb.spotify.BrowseAlbumRequest browse_album_request = 14;
  if (has_browse_album_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->browse_album_request(), output);
  }
  
  // optional .pb.spotify.BrowseAlbumResponse browse_album_response = 15;
  if (has_browse_album_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->browse_album_response(), output);
  }
  
  // optional .pb.spotify.SeekRequest seek_request = 16;
  if (has_seek_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->seek_request(), output);
  }
  
  // optional .pb.spotify.PlaybackSettings set_playback_settings_request = 17;
  if (has_set_playback_settings_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->set_playback_settings_request(), output);
  }
  
  // optional int32 id = 18;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->id(), output);
  }
  
  // optional .pb.spotify.BrowseToplistRequest browse_toplist_request = 19;
  if (has_browse_toplist_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->browse_toplist_request(), output);
  }
  
  // optional .pb.spotify.BrowseToplistResponse browse_toplist_response = 20;
  if (has_browse_toplist_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->browse_toplist_response(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.spotify.LoginRequest login_request = 1;
  if (has_login_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->login_request(), target);
  }
  
  // optional .pb.spotify.LoginResponse login_response = 2;
  if (has_login_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->login_response(), target);
  }
  
  // optional .pb.spotify.Playlists playlists_updated = 3;
  if (has_playlists_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playlists_updated(), target);
  }
  
  // optional .pb.spotify.LoadPlaylistRequest load_playlist_request = 4;
  if (has_load_playlist_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->load_playlist_request(), target);
  }
  
  // optional .pb.spotify.LoadPlaylistResponse load_playlist_response = 5;
  if (has_load_playlist_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->load_playlist_response(), target);
  }
  
  // optional .pb.spotify.PlaybackRequest playback_request = 6;
  if (has_playback_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->playback_request(), target);
  }
  
  // optional .pb.spotify.PlaybackError playback_error = 7;
  if (has_playback_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->playback_error(), target);
  }
  
  // optional .pb.spotify.SearchRequest search_request = 8;
  if (has_search_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->search_request(), target);
  }
  
  // optional .pb.spotify.SearchResponse search_response = 9;
  if (has_search_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->search_response(), target);
  }
  
  // optional .pb.spotify.ImageRequest image_request = 10;
  if (has_image_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->image_request(), target);
  }
  
  // optional .pb.spotify.ImageResponse image_response = 11;
  if (has_image_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->image_response(), target);
  }
  
  // optional .pb.spotify.SyncPlaylistRequest sync_playlist_request = 12;
  if (has_sync_playlist_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->sync_playlist_request(), target);
  }
  
  // optional .pb.spotify.SyncPlaylistProgress sync_playlist_progress = 13;
  if (has_sync_playlist_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->sync_playlist_progress(), target);
  }
  
  // optional .pb.spotify.BrowseAlbumRequest browse_album_request = 14;
  if (has_browse_album_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->browse_album_request(), target);
  }
  
  // optional .pb.spotify.BrowseAlbumResponse browse_album_response = 15;
  if (has_browse_album_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->browse_album_response(), target);
  }
  
  // optional .pb.spotify.SeekRequest seek_request = 16;
  if (has_seek_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->seek_request(), target);
  }
  
  // optional .pb.spotify.PlaybackSettings set_playback_settings_request = 17;
  if (has_set_playback_settings_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->set_playback_settings_request(), target);
  }
  
  // optional int32 id = 18;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->id(), target);
  }
  
  // optional .pb.spotify.BrowseToplistRequest browse_toplist_request = 19;
  if (has_browse_toplist_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->browse_toplist_request(), target);
  }
  
  // optional .pb.spotify.BrowseToplistResponse browse_toplist_response = 20;
  if (has_browse_toplist_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->browse_toplist_response(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 18;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .pb.spotify.LoginRequest login_request = 1;
    if (has_login_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_request());
    }
    
    // optional .pb.spotify.LoginResponse login_response = 2;
    if (has_login_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_response());
    }
    
    // optional .pb.spotify.Playlists playlists_updated = 3;
    if (has_playlists_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playlists_updated());
    }
    
    // optional .pb.spotify.LoadPlaylistRequest load_playlist_request = 4;
    if (has_load_playlist_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->load_playlist_request());
    }
    
    // optional .pb.spotify.LoadPlaylistResponse load_playlist_response = 5;
    if (has_load_playlist_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->load_playlist_response());
    }
    
    // optional .pb.spotify.PlaybackRequest playback_request = 6;
    if (has_playback_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playback_request());
    }
    
    // optional .pb.spotify.PlaybackError playback_error = 7;
    if (has_playback_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playback_error());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.spotify.SearchRequest search_request = 8;
    if (has_search_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->search_request());
    }
    
    // optional .pb.spotify.SearchResponse search_response = 9;
    if (has_search_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->search_response());
    }
    
    // optional .pb.spotify.ImageRequest image_request = 10;
    if (has_image_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image_request());
    }
    
    // optional .pb.spotify.ImageResponse image_response = 11;
    if (has_image_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image_response());
    }
    
    // optional .pb.spotify.SyncPlaylistRequest sync_playlist_request = 12;
    if (has_sync_playlist_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sync_playlist_request());
    }
    
    // optional .pb.spotify.SyncPlaylistProgress sync_playlist_progress = 13;
    if (has_sync_playlist_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sync_playlist_progress());
    }
    
    // optional .pb.spotify.BrowseAlbumRequest browse_album_request = 14;
    if (has_browse_album_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->browse_album_request());
    }
    
    // optional .pb.spotify.BrowseAlbumResponse browse_album_response = 15;
    if (has_browse_album_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->browse_album_response());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .pb.spotify.SeekRequest seek_request = 16;
    if (has_seek_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seek_request());
    }
    
    // optional .pb.spotify.PlaybackSettings set_playback_settings_request = 17;
    if (has_set_playback_settings_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_playback_settings_request());
    }
    
    // optional .pb.spotify.BrowseToplistRequest browse_toplist_request = 19;
    if (has_browse_toplist_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->browse_toplist_request());
    }
    
    // optional .pb.spotify.BrowseToplistResponse browse_toplist_response = 20;
    if (has_browse_toplist_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->browse_toplist_response());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_login_request()) {
      mutable_login_request()->::pb::spotify::LoginRequest::MergeFrom(from.login_request());
    }
    if (from.has_login_response()) {
      mutable_login_response()->::pb::spotify::LoginResponse::MergeFrom(from.login_response());
    }
    if (from.has_playlists_updated()) {
      mutable_playlists_updated()->::pb::spotify::Playlists::MergeFrom(from.playlists_updated());
    }
    if (from.has_load_playlist_request()) {
      mutable_load_playlist_request()->::pb::spotify::LoadPlaylistRequest::MergeFrom(from.load_playlist_request());
    }
    if (from.has_load_playlist_response()) {
      mutable_load_playlist_response()->::pb::spotify::LoadPlaylistResponse::MergeFrom(from.load_playlist_response());
    }
    if (from.has_playback_request()) {
      mutable_playback_request()->::pb::spotify::PlaybackRequest::MergeFrom(from.playback_request());
    }
    if (from.has_playback_error()) {
      mutable_playback_error()->::pb::spotify::PlaybackError::MergeFrom(from.playback_error());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_search_request()) {
      mutable_search_request()->::pb::spotify::SearchRequest::MergeFrom(from.search_request());
    }
    if (from.has_search_response()) {
      mutable_search_response()->::pb::spotify::SearchResponse::MergeFrom(from.search_response());
    }
    if (from.has_image_request()) {
      mutable_image_request()->::pb::spotify::ImageRequest::MergeFrom(from.image_request());
    }
    if (from.has_image_response()) {
      mutable_image_response()->::pb::spotify::ImageResponse::MergeFrom(from.image_response());
    }
    if (from.has_sync_playlist_request()) {
      mutable_sync_playlist_request()->::pb::spotify::SyncPlaylistRequest::MergeFrom(from.sync_playlist_request());
    }
    if (from.has_sync_playlist_progress()) {
      mutable_sync_playlist_progress()->::pb::spotify::SyncPlaylistProgress::MergeFrom(from.sync_playlist_progress());
    }
    if (from.has_browse_album_request()) {
      mutable_browse_album_request()->::pb::spotify::BrowseAlbumRequest::MergeFrom(from.browse_album_request());
    }
    if (from.has_browse_album_response()) {
      mutable_browse_album_response()->::pb::spotify::BrowseAlbumResponse::MergeFrom(from.browse_album_response());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_seek_request()) {
      mutable_seek_request()->::pb::spotify::SeekRequest::MergeFrom(from.seek_request());
    }
    if (from.has_set_playback_settings_request()) {
      mutable_set_playback_settings_request()->::pb::spotify::PlaybackSettings::MergeFrom(from.set_playback_settings_request());
    }
    if (from.has_browse_toplist_request()) {
      mutable_browse_toplist_request()->::pb::spotify::BrowseToplistRequest::MergeFrom(from.browse_toplist_request());
    }
    if (from.has_browse_toplist_response()) {
      mutable_browse_toplist_response()->::pb::spotify::BrowseToplistResponse::MergeFrom(from.browse_toplist_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  
  if (has_login_request()) {
    if (!this->login_request().IsInitialized()) return false;
  }
  if (has_login_response()) {
    if (!this->login_response().IsInitialized()) return false;
  }
  if (has_playlists_updated()) {
    if (!this->playlists_updated().IsInitialized()) return false;
  }
  if (has_load_playlist_request()) {
    if (!this->load_playlist_request().IsInitialized()) return false;
  }
  if (has_load_playlist_response()) {
    if (!this->load_playlist_response().IsInitialized()) return false;
  }
  if (has_playback_request()) {
    if (!this->playback_request().IsInitialized()) return false;
  }
  if (has_playback_error()) {
    if (!this->playback_error().IsInitialized()) return false;
  }
  if (has_search_request()) {
    if (!this->search_request().IsInitialized()) return false;
  }
  if (has_search_response()) {
    if (!this->search_response().IsInitialized()) return false;
  }
  if (has_image_request()) {
    if (!this->image_request().IsInitialized()) return false;
  }
  if (has_image_response()) {
    if (!this->image_response().IsInitialized()) return false;
  }
  if (has_sync_playlist_request()) {
    if (!this->sync_playlist_request().IsInitialized()) return false;
  }
  if (has_sync_playlist_progress()) {
    if (!this->sync_playlist_progress().IsInitialized()) return false;
  }
  if (has_browse_album_request()) {
    if (!this->browse_album_request().IsInitialized()) return false;
  }
  if (has_browse_album_response()) {
    if (!this->browse_album_response().IsInitialized()) return false;
  }
  if (has_browse_toplist_request()) {
    if (!this->browse_toplist_request().IsInitialized()) return false;
  }
  if (has_browse_toplist_response()) {
    if (!this->browse_toplist_response().IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(login_request_, other->login_request_);
    std::swap(login_response_, other->login_response_);
    std::swap(playlists_updated_, other->playlists_updated_);
    std::swap(load_playlist_request_, other->load_playlist_request_);
    std::swap(load_playlist_response_, other->load_playlist_response_);
    std::swap(playback_request_, other->playback_request_);
    std::swap(playback_error_, other->playback_error_);
    std::swap(search_request_, other->search_request_);
    std::swap(search_response_, other->search_response_);
    std::swap(image_request_, other->image_request_);
    std::swap(image_response_, other->image_response_);
    std::swap(sync_playlist_request_, other->sync_playlist_request_);
    std::swap(sync_playlist_progress_, other->sync_playlist_progress_);
    std::swap(browse_album_request_, other->browse_album_request_);
    std::swap(browse_album_response_, other->browse_album_response_);
    std::swap(seek_request_, other->seek_request_);
    std::swap(set_playback_settings_request_, other->set_playback_settings_request_);
    std::swap(browse_toplist_request_, other->browse_toplist_request_);
    std::swap(browse_toplist_response_, other->browse_toplist_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace spotify
}  // namespace pb

// @@protoc_insertion_point(global_scope)
