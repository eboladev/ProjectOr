// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tagreadermessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
namespace tagreader {

namespace {

const ::google::protobuf::Descriptor* SongMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SongMetadata_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SongMetadata_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReadFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsMediaFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsMediaFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsMediaFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsMediaFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadEmbeddedArtRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadEmbeddedArtRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadEmbeddedArtResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadEmbeddedArtResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadGoogleDriveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadGoogleDriveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadGoogleDriveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadGoogleDriveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tagreadermessages_2eproto() {
  protobuf_AddDesc_tagreadermessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tagreadermessages.proto");
  GOOGLE_CHECK(file != NULL);
  SongMetadata_descriptor_ = file->message_type(0);
  static const int SongMetadata_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, album_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, artist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, albumartist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, composer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, disc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, bpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, genre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, compilation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, playcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, skipcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, lastplayed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, length_nanosec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, bitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, samplerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, basefilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, ctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, suspicious_tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, art_automatic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, type_),
  };
  SongMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SongMetadata_descriptor_,
      SongMetadata::default_instance_,
      SongMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SongMetadata));
  SongMetadata_Type_descriptor_ = SongMetadata_descriptor_->enum_type(0);
  ReadFileRequest_descriptor_ = file->message_type(1);
  static const int ReadFileRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFileRequest, filename_),
  };
  ReadFileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadFileRequest_descriptor_,
      ReadFileRequest::default_instance_,
      ReadFileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadFileRequest));
  ReadFileResponse_descriptor_ = file->message_type(2);
  static const int ReadFileResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFileResponse, metadata_),
  };
  ReadFileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadFileResponse_descriptor_,
      ReadFileResponse::default_instance_,
      ReadFileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadFileResponse));
  SaveFileRequest_descriptor_ = file->message_type(3);
  static const int SaveFileRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFileRequest, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFileRequest, metadata_),
  };
  SaveFileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveFileRequest_descriptor_,
      SaveFileRequest::default_instance_,
      SaveFileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveFileRequest));
  SaveFileResponse_descriptor_ = file->message_type(4);
  static const int SaveFileResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFileResponse, success_),
  };
  SaveFileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveFileResponse_descriptor_,
      SaveFileResponse::default_instance_,
      SaveFileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveFileResponse));
  IsMediaFileRequest_descriptor_ = file->message_type(5);
  static const int IsMediaFileRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsMediaFileRequest, filename_),
  };
  IsMediaFileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsMediaFileRequest_descriptor_,
      IsMediaFileRequest::default_instance_,
      IsMediaFileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsMediaFileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsMediaFileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsMediaFileRequest));
  IsMediaFileResponse_descriptor_ = file->message_type(6);
  static const int IsMediaFileResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsMediaFileResponse, success_),
  };
  IsMediaFileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsMediaFileResponse_descriptor_,
      IsMediaFileResponse::default_instance_,
      IsMediaFileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsMediaFileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsMediaFileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsMediaFileResponse));
  LoadEmbeddedArtRequest_descriptor_ = file->message_type(7);
  static const int LoadEmbeddedArtRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadEmbeddedArtRequest, filename_),
  };
  LoadEmbeddedArtRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadEmbeddedArtRequest_descriptor_,
      LoadEmbeddedArtRequest::default_instance_,
      LoadEmbeddedArtRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadEmbeddedArtRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadEmbeddedArtRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadEmbeddedArtRequest));
  LoadEmbeddedArtResponse_descriptor_ = file->message_type(8);
  static const int LoadEmbeddedArtResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadEmbeddedArtResponse, data_),
  };
  LoadEmbeddedArtResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadEmbeddedArtResponse_descriptor_,
      LoadEmbeddedArtResponse::default_instance_,
      LoadEmbeddedArtResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadEmbeddedArtResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadEmbeddedArtResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadEmbeddedArtResponse));
  ReadGoogleDriveRequest_descriptor_ = file->message_type(9);
  static const int ReadGoogleDriveRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadGoogleDriveRequest, download_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadGoogleDriveRequest, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadGoogleDriveRequest, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadGoogleDriveRequest, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadGoogleDriveRequest, mime_type_),
  };
  ReadGoogleDriveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadGoogleDriveRequest_descriptor_,
      ReadGoogleDriveRequest::default_instance_,
      ReadGoogleDriveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadGoogleDriveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadGoogleDriveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadGoogleDriveRequest));
  ReadGoogleDriveResponse_descriptor_ = file->message_type(10);
  static const int ReadGoogleDriveResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadGoogleDriveResponse, metadata_),
  };
  ReadGoogleDriveResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadGoogleDriveResponse_descriptor_,
      ReadGoogleDriveResponse::default_instance_,
      ReadGoogleDriveResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadGoogleDriveResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadGoogleDriveResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadGoogleDriveResponse));
  Message_descriptor_ = file->message_type(11);
  static const int Message_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, read_file_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, read_file_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, save_file_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, save_file_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, is_media_file_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, is_media_file_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, load_embedded_art_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, load_embedded_art_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, read_google_drive_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, read_google_drive_response_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tagreadermessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SongMetadata_descriptor_, &SongMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadFileRequest_descriptor_, &ReadFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadFileResponse_descriptor_, &ReadFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveFileRequest_descriptor_, &SaveFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveFileResponse_descriptor_, &SaveFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsMediaFileRequest_descriptor_, &IsMediaFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsMediaFileResponse_descriptor_, &IsMediaFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadEmbeddedArtRequest_descriptor_, &LoadEmbeddedArtRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadEmbeddedArtResponse_descriptor_, &LoadEmbeddedArtResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadGoogleDriveRequest_descriptor_, &ReadGoogleDriveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadGoogleDriveResponse_descriptor_, &ReadGoogleDriveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tagreadermessages_2eproto() {
  delete SongMetadata::default_instance_;
  delete SongMetadata_reflection_;
  delete ReadFileRequest::default_instance_;
  delete ReadFileRequest_reflection_;
  delete ReadFileResponse::default_instance_;
  delete ReadFileResponse_reflection_;
  delete SaveFileRequest::default_instance_;
  delete SaveFileRequest_reflection_;
  delete SaveFileResponse::default_instance_;
  delete SaveFileResponse_reflection_;
  delete IsMediaFileRequest::default_instance_;
  delete IsMediaFileRequest_reflection_;
  delete IsMediaFileResponse::default_instance_;
  delete IsMediaFileResponse_reflection_;
  delete LoadEmbeddedArtRequest::default_instance_;
  delete LoadEmbeddedArtRequest_reflection_;
  delete LoadEmbeddedArtResponse::default_instance_;
  delete LoadEmbeddedArtResponse_reflection_;
  delete ReadGoogleDriveRequest::default_instance_;
  delete ReadGoogleDriveRequest_reflection_;
  delete ReadGoogleDriveResponse::default_instance_;
  delete ReadGoogleDriveResponse_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_tagreadermessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027tagreadermessages.proto\022\014pb.tagreader\""
    "\316\005\n\014SongMetadata\022\r\n\005valid\030\001 \001(\010\022\r\n\005title"
    "\030\002 \001(\t\022\r\n\005album\030\003 \001(\t\022\016\n\006artist\030\004 \001(\t\022\023\n"
    "\013albumartist\030\005 \001(\t\022\020\n\010composer\030\006 \001(\t\022\r\n\005"
    "track\030\007 \001(\005\022\014\n\004disc\030\010 \001(\005\022\013\n\003bpm\030\t \001(\002\022\014"
    "\n\004year\030\n \001(\005\022\r\n\005genre\030\013 \001(\t\022\017\n\007comment\030\014"
    " \001(\t\022\023\n\013compilation\030\r \001(\010\022\016\n\006rating\030\016 \001("
    "\002\022\021\n\tplaycount\030\017 \001(\005\022\021\n\tskipcount\030\020 \001(\005\022"
    "\022\n\nlastplayed\030\021 \001(\005\022\r\n\005score\030\022 \001(\005\022\026\n\016le"
    "ngth_nanosec\030\023 \001(\004\022\017\n\007bitrate\030\024 \001(\005\022\022\n\ns"
    "amplerate\030\025 \001(\005\022\013\n\003url\030\026 \001(\t\022\024\n\014basefile"
    "name\030\027 \001(\t\022\r\n\005mtime\030\030 \001(\005\022\r\n\005ctime\030\031 \001(\005"
    "\022\020\n\010filesize\030\032 \001(\005\022\027\n\017suspicious_tags\030\033 "
    "\001(\010\022\025\n\rart_automatic\030\034 \001(\t\022-\n\004type\030\035 \001(\016"
    "2\037.pb.tagreader.SongMetadata.Type\"\244\001\n\004Ty"
    "pe\022\013\n\007UNKNOWN\020\000\022\007\n\003ASF\020\001\022\010\n\004FLAC\020\002\022\007\n\003MP"
    "4\020\003\022\007\n\003MPC\020\004\022\010\n\004MPEG\020\005\022\013\n\007OGGFLAC\020\006\022\014\n\010O"
    "GGSPEEX\020\007\022\r\n\tOGGVORBIS\020\010\022\010\n\004AIFF\020\t\022\007\n\003WA"
    "V\020\n\022\r\n\tTRUEAUDIO\020\013\022\010\n\004CDDA\020\014\022\n\n\006STREAM\020c"
    "\"#\n\017ReadFileRequest\022\020\n\010filename\030\001 \001(\t\"@\n"
    "\020ReadFileResponse\022,\n\010metadata\030\001 \001(\0132\032.pb"
    ".tagreader.SongMetadata\"Q\n\017SaveFileReque"
    "st\022\020\n\010filename\030\001 \001(\t\022,\n\010metadata\030\002 \001(\0132\032"
    ".pb.tagreader.SongMetadata\"#\n\020SaveFileRe"
    "sponse\022\017\n\007success\030\001 \001(\010\"&\n\022IsMediaFileRe"
    "quest\022\020\n\010filename\030\001 \001(\t\"&\n\023IsMediaFileRe"
    "sponse\022\017\n\007success\030\001 \001(\010\"*\n\026LoadEmbeddedA"
    "rtRequest\022\020\n\010filename\030\001 \001(\t\"\'\n\027LoadEmbed"
    "dedArtResponse\022\014\n\004data\030\001 \001(\014\"t\n\026ReadGoog"
    "leDriveRequest\022\024\n\014download_url\030\001 \001(\t\022\r\n\005"
    "title\030\002 \001(\t\022\014\n\004size\030\003 \001(\005\022\024\n\014access_toke"
    "n\030\004 \001(\t\022\021\n\tmime_type\030\005 \001(\t\"G\n\027ReadGoogle"
    "DriveResponse\022,\n\010metadata\030\001 \001(\0132\032.pb.tag"
    "reader.SongMetadata\"\255\005\n\007Message\022\n\n\002id\030\001 "
    "\001(\005\0228\n\021read_file_request\030\002 \001(\0132\035.pb.tagr"
    "eader.ReadFileRequest\022:\n\022read_file_respo"
    "nse\030\003 \001(\0132\036.pb.tagreader.ReadFileRespons"
    "e\0228\n\021save_file_request\030\004 \001(\0132\035.pb.tagrea"
    "der.SaveFileRequest\022:\n\022save_file_respons"
    "e\030\005 \001(\0132\036.pb.tagreader.SaveFileResponse\022"
    "\?\n\025is_media_file_request\030\006 \001(\0132 .pb.tagr"
    "eader.IsMediaFileRequest\022A\n\026is_media_fil"
    "e_response\030\007 \001(\0132!.pb.tagreader.IsMediaF"
    "ileResponse\022G\n\031load_embedded_art_request"
    "\030\010 \001(\0132$.pb.tagreader.LoadEmbeddedArtReq"
    "uest\022I\n\032load_embedded_art_response\030\t \001(\013"
    "2%.pb.tagreader.LoadEmbeddedArtResponse\022"
    "G\n\031read_google_drive_request\030\n \001(\0132$.pb."
    "tagreader.ReadGoogleDriveRequest\022I\n\032read"
    "_google_drive_response\030\013 \001(\0132%.pb.tagrea"
    "der.ReadGoogleDriveResponse", 2027);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tagreadermessages.proto", &protobuf_RegisterTypes);
  SongMetadata::default_instance_ = new SongMetadata();
  ReadFileRequest::default_instance_ = new ReadFileRequest();
  ReadFileResponse::default_instance_ = new ReadFileResponse();
  SaveFileRequest::default_instance_ = new SaveFileRequest();
  SaveFileResponse::default_instance_ = new SaveFileResponse();
  IsMediaFileRequest::default_instance_ = new IsMediaFileRequest();
  IsMediaFileResponse::default_instance_ = new IsMediaFileResponse();
  LoadEmbeddedArtRequest::default_instance_ = new LoadEmbeddedArtRequest();
  LoadEmbeddedArtResponse::default_instance_ = new LoadEmbeddedArtResponse();
  ReadGoogleDriveRequest::default_instance_ = new ReadGoogleDriveRequest();
  ReadGoogleDriveResponse::default_instance_ = new ReadGoogleDriveResponse();
  Message::default_instance_ = new Message();
  SongMetadata::default_instance_->InitAsDefaultInstance();
  ReadFileRequest::default_instance_->InitAsDefaultInstance();
  ReadFileResponse::default_instance_->InitAsDefaultInstance();
  SaveFileRequest::default_instance_->InitAsDefaultInstance();
  SaveFileResponse::default_instance_->InitAsDefaultInstance();
  IsMediaFileRequest::default_instance_->InitAsDefaultInstance();
  IsMediaFileResponse::default_instance_->InitAsDefaultInstance();
  LoadEmbeddedArtRequest::default_instance_->InitAsDefaultInstance();
  LoadEmbeddedArtResponse::default_instance_->InitAsDefaultInstance();
  ReadGoogleDriveRequest::default_instance_->InitAsDefaultInstance();
  ReadGoogleDriveResponse::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tagreadermessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tagreadermessages_2eproto {
  StaticDescriptorInitializer_tagreadermessages_2eproto() {
    protobuf_AddDesc_tagreadermessages_2eproto();
  }
} static_descriptor_initializer_tagreadermessages_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* SongMetadata_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SongMetadata_Type_descriptor_;
}
bool SongMetadata_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SongMetadata_Type SongMetadata::UNKNOWN;
const SongMetadata_Type SongMetadata::ASF;
const SongMetadata_Type SongMetadata::FLAC;
const SongMetadata_Type SongMetadata::MP4;
const SongMetadata_Type SongMetadata::MPC;
const SongMetadata_Type SongMetadata::MPEG;
const SongMetadata_Type SongMetadata::OGGFLAC;
const SongMetadata_Type SongMetadata::OGGSPEEX;
const SongMetadata_Type SongMetadata::OGGVORBIS;
const SongMetadata_Type SongMetadata::AIFF;
const SongMetadata_Type SongMetadata::WAV;
const SongMetadata_Type SongMetadata::TRUEAUDIO;
const SongMetadata_Type SongMetadata::CDDA;
const SongMetadata_Type SongMetadata::STREAM;
const SongMetadata_Type SongMetadata::Type_MIN;
const SongMetadata_Type SongMetadata::Type_MAX;
const int SongMetadata::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SongMetadata::kValidFieldNumber;
const int SongMetadata::kTitleFieldNumber;
const int SongMetadata::kAlbumFieldNumber;
const int SongMetadata::kArtistFieldNumber;
const int SongMetadata::kAlbumartistFieldNumber;
const int SongMetadata::kComposerFieldNumber;
const int SongMetadata::kTrackFieldNumber;
const int SongMetadata::kDiscFieldNumber;
const int SongMetadata::kBpmFieldNumber;
const int SongMetadata::kYearFieldNumber;
const int SongMetadata::kGenreFieldNumber;
const int SongMetadata::kCommentFieldNumber;
const int SongMetadata::kCompilationFieldNumber;
const int SongMetadata::kRatingFieldNumber;
const int SongMetadata::kPlaycountFieldNumber;
const int SongMetadata::kSkipcountFieldNumber;
const int SongMetadata::kLastplayedFieldNumber;
const int SongMetadata::kScoreFieldNumber;
const int SongMetadata::kLengthNanosecFieldNumber;
const int SongMetadata::kBitrateFieldNumber;
const int SongMetadata::kSamplerateFieldNumber;
const int SongMetadata::kUrlFieldNumber;
const int SongMetadata::kBasefilenameFieldNumber;
const int SongMetadata::kMtimeFieldNumber;
const int SongMetadata::kCtimeFieldNumber;
const int SongMetadata::kFilesizeFieldNumber;
const int SongMetadata::kSuspiciousTagsFieldNumber;
const int SongMetadata::kArtAutomaticFieldNumber;
const int SongMetadata::kTypeFieldNumber;
#endif  // !_MSC_VER

SongMetadata::SongMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SongMetadata::InitAsDefaultInstance() {
}

SongMetadata::SongMetadata(const SongMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SongMetadata::SharedCtor() {
  _cached_size_ = 0;
  valid_ = false;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  album_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  artist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  albumartist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  composer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  track_ = 0;
  disc_ = 0;
  bpm_ = 0;
  year_ = 0;
  genre_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  compilation_ = false;
  rating_ = 0;
  playcount_ = 0;
  skipcount_ = 0;
  lastplayed_ = 0;
  score_ = 0;
  length_nanosec_ = GOOGLE_ULONGLONG(0);
  bitrate_ = 0;
  samplerate_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  basefilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mtime_ = 0;
  ctime_ = 0;
  filesize_ = 0;
  suspicious_tags_ = false;
  art_automatic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SongMetadata::~SongMetadata() {
  SharedDtor();
}

void SongMetadata::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (album_ != &::google::protobuf::internal::kEmptyString) {
    delete album_;
  }
  if (artist_ != &::google::protobuf::internal::kEmptyString) {
    delete artist_;
  }
  if (albumartist_ != &::google::protobuf::internal::kEmptyString) {
    delete albumartist_;
  }
  if (composer_ != &::google::protobuf::internal::kEmptyString) {
    delete composer_;
  }
  if (genre_ != &::google::protobuf::internal::kEmptyString) {
    delete genre_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (basefilename_ != &::google::protobuf::internal::kEmptyString) {
    delete basefilename_;
  }
  if (art_automatic_ != &::google::protobuf::internal::kEmptyString) {
    delete art_automatic_;
  }
  if (this != default_instance_) {
  }
}

void SongMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SongMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SongMetadata_descriptor_;
}

const SongMetadata& SongMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagreadermessages_2eproto();  return *default_instance_;
}

SongMetadata* SongMetadata::default_instance_ = NULL;

SongMetadata* SongMetadata::New() const {
  return new SongMetadata;
}

void SongMetadata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    valid_ = false;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_album()) {
      if (album_ != &::google::protobuf::internal::kEmptyString) {
        album_->clear();
      }
    }
    if (has_artist()) {
      if (artist_ != &::google::protobuf::internal::kEmptyString) {
        artist_->clear();
      }
    }
    if (has_albumartist()) {
      if (albumartist_ != &::google::protobuf::internal::kEmptyString) {
        albumartist_->clear();
      }
    }
    if (has_composer()) {
      if (composer_ != &::google::protobuf::internal::kEmptyString) {
        composer_->clear();
      }
    }
    track_ = 0;
    disc_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bpm_ = 0;
    year_ = 0;
    if (has_genre()) {
      if (genre_ != &::google::protobuf::internal::kEmptyString) {
        genre_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    compilation_ = false;
    rating_ = 0;
    playcount_ = 0;
    skipcount_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    lastplayed_ = 0;
    score_ = 0;
    length_nanosec_ = GOOGLE_ULONGLONG(0);
    bitrate_ = 0;
    samplerate_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_basefilename()) {
      if (basefilename_ != &::google::protobuf::internal::kEmptyString) {
        basefilename_->clear();
      }
    }
    mtime_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ctime_ = 0;
    filesize_ = 0;
    suspicious_tags_ = false;
    if (has_art_automatic()) {
      if (art_automatic_ != &::google::protobuf::internal::kEmptyString) {
        art_automatic_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SongMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool valid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }
      
      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_album;
        break;
      }
      
      // optional string album = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album().data(), this->album().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_artist;
        break;
      }
      
      // optional string artist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_artist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->artist().data(), this->artist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_albumartist;
        break;
      }
      
      // optional string albumartist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_albumartist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_albumartist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->albumartist().data(), this->albumartist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_composer;
        break;
      }
      
      // optional string composer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_composer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_composer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->composer().data(), this->composer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_track;
        break;
      }
      
      // optional int32 track = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_track:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_)));
          set_has_track();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_disc;
        break;
      }
      
      // optional int32 disc = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disc_)));
          set_has_disc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_bpm;
        break;
      }
      
      // optional float bpm = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bpm_)));
          set_has_bpm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_year;
        break;
      }
      
      // optional int32 year = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_genre;
        break;
      }
      
      // optional string genre = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_genre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_genre()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->genre().data(), this->genre().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_comment;
        break;
      }
      
      // optional string comment = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_compilation;
        break;
      }
      
      // optional bool compilation = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compilation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compilation_)));
          set_has_compilation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_rating;
        break;
      }
      
      // optional float rating = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rating_)));
          set_has_rating();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_playcount;
        break;
      }
      
      // optional int32 playcount = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playcount_)));
          set_has_playcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_skipcount;
        break;
      }
      
      // optional int32 skipcount = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skipcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skipcount_)));
          set_has_skipcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lastplayed;
        break;
      }
      
      // optional int32 lastplayed = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastplayed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastplayed_)));
          set_has_lastplayed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_score;
        break;
      }
      
      // optional int32 score = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_length_nanosec;
        break;
      }
      
      // optional uint64 length_nanosec = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length_nanosec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &length_nanosec_)));
          set_has_length_nanosec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_bitrate;
        break;
      }
      
      // optional int32 bitrate = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitrate_)));
          set_has_bitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_samplerate;
        break;
      }
      
      // optional int32 samplerate = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_samplerate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &samplerate_)));
          set_has_samplerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_url;
        break;
      }
      
      // optional string url = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_basefilename;
        break;
      }
      
      // optional string basefilename = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_basefilename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basefilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->basefilename().data(), this->basefilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_mtime;
        break;
      }
      
      // optional int32 mtime = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_ctime;
        break;
      }
      
      // optional int32 ctime = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctime_)));
          set_has_ctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_filesize;
        break;
      }
      
      // optional int32 filesize = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_suspicious_tags;
        break;
      }
      
      // optional bool suspicious_tags = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suspicious_tags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suspicious_tags_)));
          set_has_suspicious_tags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_art_automatic;
        break;
      }
      
      // optional string art_automatic = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_art_automatic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_art_automatic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->art_automatic().data(), this->art_automatic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_type;
        break;
      }
      
      // optional .pb.tagreader.SongMetadata.Type type = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::tagreader::SongMetadata_Type_IsValid(value)) {
            set_type(static_cast< ::pb::tagreader::SongMetadata_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(29, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SongMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool valid = 1;
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->valid(), output);
  }
  
  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }
  
  // optional string album = 3;
  if (has_album()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album().data(), this->album().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->album(), output);
  }
  
  // optional string artist = 4;
  if (has_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->artist(), output);
  }
  
  // optional string albumartist = 5;
  if (has_albumartist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->albumartist().data(), this->albumartist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->albumartist(), output);
  }
  
  // optional string composer = 6;
  if (has_composer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->composer().data(), this->composer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->composer(), output);
  }
  
  // optional int32 track = 7;
  if (has_track()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->track(), output);
  }
  
  // optional int32 disc = 8;
  if (has_disc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->disc(), output);
  }
  
  // optional float bpm = 9;
  if (has_bpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->bpm(), output);
  }
  
  // optional int32 year = 10;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->year(), output);
  }
  
  // optional string genre = 11;
  if (has_genre()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->genre(), output);
  }
  
  // optional string comment = 12;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->comment(), output);
  }
  
  // optional bool compilation = 13;
  if (has_compilation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->compilation(), output);
  }
  
  // optional float rating = 14;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->rating(), output);
  }
  
  // optional int32 playcount = 15;
  if (has_playcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->playcount(), output);
  }
  
  // optional int32 skipcount = 16;
  if (has_skipcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->skipcount(), output);
  }
  
  // optional int32 lastplayed = 17;
  if (has_lastplayed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->lastplayed(), output);
  }
  
  // optional int32 score = 18;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->score(), output);
  }
  
  // optional uint64 length_nanosec = 19;
  if (has_length_nanosec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->length_nanosec(), output);
  }
  
  // optional int32 bitrate = 20;
  if (has_bitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->bitrate(), output);
  }
  
  // optional int32 samplerate = 21;
  if (has_samplerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->samplerate(), output);
  }
  
  // optional string url = 22;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->url(), output);
  }
  
  // optional string basefilename = 23;
  if (has_basefilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->basefilename().data(), this->basefilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->basefilename(), output);
  }
  
  // optional int32 mtime = 24;
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->mtime(), output);
  }
  
  // optional int32 ctime = 25;
  if (has_ctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->ctime(), output);
  }
  
  // optional int32 filesize = 26;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->filesize(), output);
  }
  
  // optional bool suspicious_tags = 27;
  if (has_suspicious_tags()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->suspicious_tags(), output);
  }
  
  // optional string art_automatic = 28;
  if (has_art_automatic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->art_automatic().data(), this->art_automatic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->art_automatic(), output);
  }
  
  // optional .pb.tagreader.SongMetadata.Type type = 29;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      29, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SongMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool valid = 1;
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->valid(), target);
  }
  
  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }
  
  // optional string album = 3;
  if (has_album()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album().data(), this->album().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->album(), target);
  }
  
  // optional string artist = 4;
  if (has_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->artist(), target);
  }
  
  // optional string albumartist = 5;
  if (has_albumartist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->albumartist().data(), this->albumartist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->albumartist(), target);
  }
  
  // optional string composer = 6;
  if (has_composer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->composer().data(), this->composer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->composer(), target);
  }
  
  // optional int32 track = 7;
  if (has_track()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->track(), target);
  }
  
  // optional int32 disc = 8;
  if (has_disc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->disc(), target);
  }
  
  // optional float bpm = 9;
  if (has_bpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->bpm(), target);
  }
  
  // optional int32 year = 10;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->year(), target);
  }
  
  // optional string genre = 11;
  if (has_genre()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->genre(), target);
  }
  
  // optional string comment = 12;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->comment(), target);
  }
  
  // optional bool compilation = 13;
  if (has_compilation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->compilation(), target);
  }
  
  // optional float rating = 14;
  if (has_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->rating(), target);
  }
  
  // optional int32 playcount = 15;
  if (has_playcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->playcount(), target);
  }
  
  // optional int32 skipcount = 16;
  if (has_skipcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->skipcount(), target);
  }
  
  // optional int32 lastplayed = 17;
  if (has_lastplayed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->lastplayed(), target);
  }
  
  // optional int32 score = 18;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->score(), target);
  }
  
  // optional uint64 length_nanosec = 19;
  if (has_length_nanosec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->length_nanosec(), target);
  }
  
  // optional int32 bitrate = 20;
  if (has_bitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->bitrate(), target);
  }
  
  // optional int32 samplerate = 21;
  if (has_samplerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->samplerate(), target);
  }
  
  // optional string url = 22;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->url(), target);
  }
  
  // optional string basefilename = 23;
  if (has_basefilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->basefilename().data(), this->basefilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->basefilename(), target);
  }
  
  // optional int32 mtime = 24;
  if (has_mtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->mtime(), target);
  }
  
  // optional int32 ctime = 25;
  if (has_ctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->ctime(), target);
  }
  
  // optional int32 filesize = 26;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->filesize(), target);
  }
  
  // optional bool suspicious_tags = 27;
  if (has_suspicious_tags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->suspicious_tags(), target);
  }
  
  // optional string art_automatic = 28;
  if (has_art_automatic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->art_automatic().data(), this->art_automatic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->art_automatic(), target);
  }
  
  // optional .pb.tagreader.SongMetadata.Type type = 29;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      29, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SongMetadata::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool valid = 1;
    if (has_valid()) {
      total_size += 1 + 1;
    }
    
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string album = 3;
    if (has_album()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album());
    }
    
    // optional string artist = 4;
    if (has_artist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artist());
    }
    
    // optional string albumartist = 5;
    if (has_albumartist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->albumartist());
    }
    
    // optional string composer = 6;
    if (has_composer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->composer());
    }
    
    // optional int32 track = 7;
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->track());
    }
    
    // optional int32 disc = 8;
    if (has_disc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->disc());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float bpm = 9;
    if (has_bpm()) {
      total_size += 1 + 4;
    }
    
    // optional int32 year = 10;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }
    
    // optional string genre = 11;
    if (has_genre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->genre());
    }
    
    // optional string comment = 12;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }
    
    // optional bool compilation = 13;
    if (has_compilation()) {
      total_size += 1 + 1;
    }
    
    // optional float rating = 14;
    if (has_rating()) {
      total_size += 1 + 4;
    }
    
    // optional int32 playcount = 15;
    if (has_playcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playcount());
    }
    
    // optional int32 skipcount = 16;
    if (has_skipcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skipcount());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 lastplayed = 17;
    if (has_lastplayed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastplayed());
    }
    
    // optional int32 score = 18;
    if (has_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // optional uint64 length_nanosec = 19;
    if (has_length_nanosec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->length_nanosec());
    }
    
    // optional int32 bitrate = 20;
    if (has_bitrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bitrate());
    }
    
    // optional int32 samplerate = 21;
    if (has_samplerate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->samplerate());
    }
    
    // optional string url = 22;
    if (has_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional string basefilename = 23;
    if (has_basefilename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->basefilename());
    }
    
    // optional int32 mtime = 24;
    if (has_mtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mtime());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 ctime = 25;
    if (has_ctime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctime());
    }
    
    // optional int32 filesize = 26;
    if (has_filesize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filesize());
    }
    
    // optional bool suspicious_tags = 27;
    if (has_suspicious_tags()) {
      total_size += 2 + 1;
    }
    
    // optional string art_automatic = 28;
    if (has_art_automatic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->art_automatic());
    }
    
    // optional .pb.tagreader.SongMetadata.Type type = 29;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SongMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SongMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SongMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SongMetadata::MergeFrom(const SongMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_valid()) {
      set_valid(from.valid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_album()) {
      set_album(from.album());
    }
    if (from.has_artist()) {
      set_artist(from.artist());
    }
    if (from.has_albumartist()) {
      set_albumartist(from.albumartist());
    }
    if (from.has_composer()) {
      set_composer(from.composer());
    }
    if (from.has_track()) {
      set_track(from.track());
    }
    if (from.has_disc()) {
      set_disc(from.disc());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bpm()) {
      set_bpm(from.bpm());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_genre()) {
      set_genre(from.genre());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_compilation()) {
      set_compilation(from.compilation());
    }
    if (from.has_rating()) {
      set_rating(from.rating());
    }
    if (from.has_playcount()) {
      set_playcount(from.playcount());
    }
    if (from.has_skipcount()) {
      set_skipcount(from.skipcount());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lastplayed()) {
      set_lastplayed(from.lastplayed());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_length_nanosec()) {
      set_length_nanosec(from.length_nanosec());
    }
    if (from.has_bitrate()) {
      set_bitrate(from.bitrate());
    }
    if (from.has_samplerate()) {
      set_samplerate(from.samplerate());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_basefilename()) {
      set_basefilename(from.basefilename());
    }
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ctime()) {
      set_ctime(from.ctime());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_suspicious_tags()) {
      set_suspicious_tags(from.suspicious_tags());
    }
    if (from.has_art_automatic()) {
      set_art_automatic(from.art_automatic());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SongMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SongMetadata::CopyFrom(const SongMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SongMetadata::IsInitialized() const {
  
  return true;
}

void SongMetadata::Swap(SongMetadata* other) {
  if (other != this) {
    std::swap(valid_, other->valid_);
    std::swap(title_, other->title_);
    std::swap(album_, other->album_);
    std::swap(artist_, other->artist_);
    std::swap(albumartist_, other->albumartist_);
    std::swap(composer_, other->composer_);
    std::swap(track_, other->track_);
    std::swap(disc_, other->disc_);
    std::swap(bpm_, other->bpm_);
    std::swap(year_, other->year_);
    std::swap(genre_, other->genre_);
    std::swap(comment_, other->comment_);
    std::swap(compilation_, other->compilation_);
    std::swap(rating_, other->rating_);
    std::swap(playcount_, other->playcount_);
    std::swap(skipcount_, other->skipcount_);
    std::swap(lastplayed_, other->lastplayed_);
    std::swap(score_, other->score_);
    std::swap(length_nanosec_, other->length_nanosec_);
    std::swap(bitrate_, other->bitrate_);
    std::swap(samplerate_, other->samplerate_);
    std::swap(url_, other->url_);
    std::swap(basefilename_, other->basefilename_);
    std::swap(mtime_, other->mtime_);
    std::swap(ctime_, other->ctime_);
    std::swap(filesize_, other->filesize_);
    std::swap(suspicious_tags_, other->suspicious_tags_);
    std::swap(art_automatic_, other->art_automatic_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SongMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SongMetadata_descriptor_;
  metadata.reflection = SongMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadFileRequest::kFilenameFieldNumber;
#endif  // !_MSC_VER

ReadFileRequest::ReadFileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadFileRequest::InitAsDefaultInstance() {
}

ReadFileRequest::ReadFileRequest(const ReadFileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadFileRequest::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadFileRequest::~ReadFileRequest() {
  SharedDtor();
}

void ReadFileRequest::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void ReadFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadFileRequest_descriptor_;
}

const ReadFileRequest& ReadFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagreadermessages_2eproto();  return *default_instance_;
}

ReadFileRequest* ReadFileRequest::default_instance_ = NULL;

ReadFileRequest* ReadFileRequest::New() const {
  return new ReadFileRequest;
}

void ReadFileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadFileRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadFileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadFileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadFileRequest::MergeFrom(const ReadFileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadFileRequest::CopyFrom(const ReadFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadFileRequest::IsInitialized() const {
  
  return true;
}

void ReadFileRequest::Swap(ReadFileRequest* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadFileRequest_descriptor_;
  metadata.reflection = ReadFileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadFileResponse::kMetadataFieldNumber;
#endif  // !_MSC_VER

ReadFileResponse::ReadFileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadFileResponse::InitAsDefaultInstance() {
  metadata_ = const_cast< ::pb::tagreader::SongMetadata*>(&::pb::tagreader::SongMetadata::default_instance());
}

ReadFileResponse::ReadFileResponse(const ReadFileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadFileResponse::SharedCtor() {
  _cached_size_ = 0;
  metadata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadFileResponse::~ReadFileResponse() {
  SharedDtor();
}

void ReadFileResponse::SharedDtor() {
  if (this != default_instance_) {
    delete metadata_;
  }
}

void ReadFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadFileResponse_descriptor_;
}

const ReadFileResponse& ReadFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagreadermessages_2eproto();  return *default_instance_;
}

ReadFileResponse* ReadFileResponse::default_instance_ = NULL;

ReadFileResponse* ReadFileResponse::New() const {
  return new ReadFileResponse;
}

void ReadFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_metadata()) {
      if (metadata_ != NULL) metadata_->::pb::tagreader::SongMetadata::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.tagreader.SongMetadata metadata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.tagreader.SongMetadata metadata = 1;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metadata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.tagreader.SongMetadata metadata = 1;
  if (has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->metadata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadFileResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.tagreader.SongMetadata metadata = 1;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadFileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadFileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadFileResponse::MergeFrom(const ReadFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_metadata()) {
      mutable_metadata()->::pb::tagreader::SongMetadata::MergeFrom(from.metadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadFileResponse::CopyFrom(const ReadFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadFileResponse::IsInitialized() const {
  
  return true;
}

void ReadFileResponse::Swap(ReadFileResponse* other) {
  if (other != this) {
    std::swap(metadata_, other->metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadFileResponse_descriptor_;
  metadata.reflection = ReadFileResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveFileRequest::kFilenameFieldNumber;
const int SaveFileRequest::kMetadataFieldNumber;
#endif  // !_MSC_VER

SaveFileRequest::SaveFileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveFileRequest::InitAsDefaultInstance() {
  metadata_ = const_cast< ::pb::tagreader::SongMetadata*>(&::pb::tagreader::SongMetadata::default_instance());
}

SaveFileRequest::SaveFileRequest(const SaveFileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveFileRequest::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  metadata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveFileRequest::~SaveFileRequest() {
  SharedDtor();
}

void SaveFileRequest::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
    delete metadata_;
  }
}

void SaveFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveFileRequest_descriptor_;
}

const SaveFileRequest& SaveFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagreadermessages_2eproto();  return *default_instance_;
}

SaveFileRequest* SaveFileRequest::default_instance_ = NULL;

SaveFileRequest* SaveFileRequest::New() const {
  return new SaveFileRequest;
}

void SaveFileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_metadata()) {
      if (metadata_ != NULL) metadata_->::pb::tagreader::SongMetadata::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_metadata;
        break;
      }
      
      // optional .pb.tagreader.SongMetadata metadata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }
  
  // optional .pb.tagreader.SongMetadata metadata = 2;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->metadata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }
  
  // optional .pb.tagreader.SongMetadata metadata = 2;
  if (has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->metadata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveFileRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
    // optional .pb.tagreader.SongMetadata metadata = 2;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveFileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveFileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveFileRequest::MergeFrom(const SaveFileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_metadata()) {
      mutable_metadata()->::pb::tagreader::SongMetadata::MergeFrom(from.metadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveFileRequest::CopyFrom(const SaveFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveFileRequest::IsInitialized() const {
  
  return true;
}

void SaveFileRequest::Swap(SaveFileRequest* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(metadata_, other->metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveFileRequest_descriptor_;
  metadata.reflection = SaveFileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveFileResponse::kSuccessFieldNumber;
#endif  // !_MSC_VER

SaveFileResponse::SaveFileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveFileResponse::InitAsDefaultInstance() {
}

SaveFileResponse::SaveFileResponse(const SaveFileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveFileResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveFileResponse::~SaveFileResponse() {
  SharedDtor();
}

void SaveFileResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveFileResponse_descriptor_;
}

const SaveFileResponse& SaveFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagreadermessages_2eproto();  return *default_instance_;
}

SaveFileResponse* SaveFileResponse::default_instance_ = NULL;

SaveFileResponse* SaveFileResponse::New() const {
  return new SaveFileResponse;
}

void SaveFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveFileResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveFileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveFileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveFileResponse::MergeFrom(const SaveFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveFileResponse::CopyFrom(const SaveFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveFileResponse::IsInitialized() const {
  
  return true;
}

void SaveFileResponse::Swap(SaveFileResponse* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveFileResponse_descriptor_;
  metadata.reflection = SaveFileResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsMediaFileRequest::kFilenameFieldNumber;
#endif  // !_MSC_VER

IsMediaFileRequest::IsMediaFileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsMediaFileRequest::InitAsDefaultInstance() {
}

IsMediaFileRequest::IsMediaFileRequest(const IsMediaFileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsMediaFileRequest::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsMediaFileRequest::~IsMediaFileRequest() {
  SharedDtor();
}

void IsMediaFileRequest::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void IsMediaFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsMediaFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsMediaFileRequest_descriptor_;
}

const IsMediaFileRequest& IsMediaFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagreadermessages_2eproto();  return *default_instance_;
}

IsMediaFileRequest* IsMediaFileRequest::default_instance_ = NULL;

IsMediaFileRequest* IsMediaFileRequest::New() const {
  return new IsMediaFileRequest;
}

void IsMediaFileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsMediaFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsMediaFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsMediaFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsMediaFileRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsMediaFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsMediaFileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsMediaFileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsMediaFileRequest::MergeFrom(const IsMediaFileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsMediaFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsMediaFileRequest::CopyFrom(const IsMediaFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsMediaFileRequest::IsInitialized() const {
  
  return true;
}

void IsMediaFileRequest::Swap(IsMediaFileRequest* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsMediaFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsMediaFileRequest_descriptor_;
  metadata.reflection = IsMediaFileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsMediaFileResponse::kSuccessFieldNumber;
#endif  // !_MSC_VER

IsMediaFileResponse::IsMediaFileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsMediaFileResponse::InitAsDefaultInstance() {
}

IsMediaFileResponse::IsMediaFileResponse(const IsMediaFileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsMediaFileResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsMediaFileResponse::~IsMediaFileResponse() {
  SharedDtor();
}

void IsMediaFileResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsMediaFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsMediaFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsMediaFileResponse_descriptor_;
}

const IsMediaFileResponse& IsMediaFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagreadermessages_2eproto();  return *default_instance_;
}

IsMediaFileResponse* IsMediaFileResponse::default_instance_ = NULL;

IsMediaFileResponse* IsMediaFileResponse::New() const {
  return new IsMediaFileResponse;
}

void IsMediaFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsMediaFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsMediaFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsMediaFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsMediaFileResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsMediaFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsMediaFileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsMediaFileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsMediaFileResponse::MergeFrom(const IsMediaFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsMediaFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsMediaFileResponse::CopyFrom(const IsMediaFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsMediaFileResponse::IsInitialized() const {
  
  return true;
}

void IsMediaFileResponse::Swap(IsMediaFileResponse* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsMediaFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsMediaFileResponse_descriptor_;
  metadata.reflection = IsMediaFileResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadEmbeddedArtRequest::kFilenameFieldNumber;
#endif  // !_MSC_VER

LoadEmbeddedArtRequest::LoadEmbeddedArtRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoadEmbeddedArtRequest::InitAsDefaultInstance() {
}

LoadEmbeddedArtRequest::LoadEmbeddedArtRequest(const LoadEmbeddedArtRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoadEmbeddedArtRequest::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadEmbeddedArtRequest::~LoadEmbeddedArtRequest() {
  SharedDtor();
}

void LoadEmbeddedArtRequest::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void LoadEmbeddedArtRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadEmbeddedArtRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadEmbeddedArtRequest_descriptor_;
}

const LoadEmbeddedArtRequest& LoadEmbeddedArtRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagreadermessages_2eproto();  return *default_instance_;
}

LoadEmbeddedArtRequest* LoadEmbeddedArtRequest::default_instance_ = NULL;

LoadEmbeddedArtRequest* LoadEmbeddedArtRequest::New() const {
  return new LoadEmbeddedArtRequest;
}

void LoadEmbeddedArtRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadEmbeddedArtRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoadEmbeddedArtRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoadEmbeddedArtRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoadEmbeddedArtRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadEmbeddedArtRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadEmbeddedArtRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadEmbeddedArtRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadEmbeddedArtRequest::MergeFrom(const LoadEmbeddedArtRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadEmbeddedArtRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadEmbeddedArtRequest::CopyFrom(const LoadEmbeddedArtRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadEmbeddedArtRequest::IsInitialized() const {
  
  return true;
}

void LoadEmbeddedArtRequest::Swap(LoadEmbeddedArtRequest* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadEmbeddedArtRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadEmbeddedArtRequest_descriptor_;
  metadata.reflection = LoadEmbeddedArtRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadEmbeddedArtResponse::kDataFieldNumber;
#endif  // !_MSC_VER

LoadEmbeddedArtResponse::LoadEmbeddedArtResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoadEmbeddedArtResponse::InitAsDefaultInstance() {
}

LoadEmbeddedArtResponse::LoadEmbeddedArtResponse(const LoadEmbeddedArtResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoadEmbeddedArtResponse::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadEmbeddedArtResponse::~LoadEmbeddedArtResponse() {
  SharedDtor();
}

void LoadEmbeddedArtResponse::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void LoadEmbeddedArtResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadEmbeddedArtResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadEmbeddedArtResponse_descriptor_;
}

const LoadEmbeddedArtResponse& LoadEmbeddedArtResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagreadermessages_2eproto();  return *default_instance_;
}

LoadEmbeddedArtResponse* LoadEmbeddedArtResponse::default_instance_ = NULL;

LoadEmbeddedArtResponse* LoadEmbeddedArtResponse::New() const {
  return new LoadEmbeddedArtResponse;
}

void LoadEmbeddedArtResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadEmbeddedArtResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoadEmbeddedArtResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoadEmbeddedArtResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoadEmbeddedArtResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadEmbeddedArtResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadEmbeddedArtResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadEmbeddedArtResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadEmbeddedArtResponse::MergeFrom(const LoadEmbeddedArtResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadEmbeddedArtResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadEmbeddedArtResponse::CopyFrom(const LoadEmbeddedArtResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadEmbeddedArtResponse::IsInitialized() const {
  
  return true;
}

void LoadEmbeddedArtResponse::Swap(LoadEmbeddedArtResponse* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadEmbeddedArtResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadEmbeddedArtResponse_descriptor_;
  metadata.reflection = LoadEmbeddedArtResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadGoogleDriveRequest::kDownloadUrlFieldNumber;
const int ReadGoogleDriveRequest::kTitleFieldNumber;
const int ReadGoogleDriveRequest::kSizeFieldNumber;
const int ReadGoogleDriveRequest::kAccessTokenFieldNumber;
const int ReadGoogleDriveRequest::kMimeTypeFieldNumber;
#endif  // !_MSC_VER

ReadGoogleDriveRequest::ReadGoogleDriveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadGoogleDriveRequest::InitAsDefaultInstance() {
}

ReadGoogleDriveRequest::ReadGoogleDriveRequest(const ReadGoogleDriveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadGoogleDriveRequest::SharedCtor() {
  _cached_size_ = 0;
  download_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mime_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadGoogleDriveRequest::~ReadGoogleDriveRequest() {
  SharedDtor();
}

void ReadGoogleDriveRequest::SharedDtor() {
  if (download_url_ != &::google::protobuf::internal::kEmptyString) {
    delete download_url_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (access_token_ != &::google::protobuf::internal::kEmptyString) {
    delete access_token_;
  }
  if (mime_type_ != &::google::protobuf::internal::kEmptyString) {
    delete mime_type_;
  }
  if (this != default_instance_) {
  }
}

void ReadGoogleDriveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadGoogleDriveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadGoogleDriveRequest_descriptor_;
}

const ReadGoogleDriveRequest& ReadGoogleDriveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagreadermessages_2eproto();  return *default_instance_;
}

ReadGoogleDriveRequest* ReadGoogleDriveRequest::default_instance_ = NULL;

ReadGoogleDriveRequest* ReadGoogleDriveRequest::New() const {
  return new ReadGoogleDriveRequest;
}

void ReadGoogleDriveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_download_url()) {
      if (download_url_ != &::google::protobuf::internal::kEmptyString) {
        download_url_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    size_ = 0;
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::kEmptyString) {
        access_token_->clear();
      }
    }
    if (has_mime_type()) {
      if (mime_type_ != &::google::protobuf::internal::kEmptyString) {
        mime_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadGoogleDriveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string download_url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->download_url().data(), this->download_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }
      
      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }
      
      // optional int32 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_access_token;
        break;
      }
      
      // optional string access_token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_access_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mime_type;
        break;
      }
      
      // optional string mime_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mime_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mime_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mime_type().data(), this->mime_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadGoogleDriveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string download_url = 1;
  if (has_download_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->download_url().data(), this->download_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->download_url(), output);
  }
  
  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }
  
  // optional int32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }
  
  // optional string access_token = 4;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->access_token(), output);
  }
  
  // optional string mime_type = 5;
  if (has_mime_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->mime_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadGoogleDriveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string download_url = 1;
  if (has_download_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->download_url().data(), this->download_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->download_url(), target);
  }
  
  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }
  
  // optional int32 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }
  
  // optional string access_token = 4;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->access_token(), target);
  }
  
  // optional string mime_type = 5;
  if (has_mime_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mime_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadGoogleDriveRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string download_url = 1;
    if (has_download_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->download_url());
    }
    
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional int32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }
    
    // optional string access_token = 4;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }
    
    // optional string mime_type = 5;
    if (has_mime_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mime_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadGoogleDriveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadGoogleDriveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadGoogleDriveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadGoogleDriveRequest::MergeFrom(const ReadGoogleDriveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_download_url()) {
      set_download_url(from.download_url());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_mime_type()) {
      set_mime_type(from.mime_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadGoogleDriveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadGoogleDriveRequest::CopyFrom(const ReadGoogleDriveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadGoogleDriveRequest::IsInitialized() const {
  
  return true;
}

void ReadGoogleDriveRequest::Swap(ReadGoogleDriveRequest* other) {
  if (other != this) {
    std::swap(download_url_, other->download_url_);
    std::swap(title_, other->title_);
    std::swap(size_, other->size_);
    std::swap(access_token_, other->access_token_);
    std::swap(mime_type_, other->mime_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadGoogleDriveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadGoogleDriveRequest_descriptor_;
  metadata.reflection = ReadGoogleDriveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadGoogleDriveResponse::kMetadataFieldNumber;
#endif  // !_MSC_VER

ReadGoogleDriveResponse::ReadGoogleDriveResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadGoogleDriveResponse::InitAsDefaultInstance() {
  metadata_ = const_cast< ::pb::tagreader::SongMetadata*>(&::pb::tagreader::SongMetadata::default_instance());
}

ReadGoogleDriveResponse::ReadGoogleDriveResponse(const ReadGoogleDriveResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadGoogleDriveResponse::SharedCtor() {
  _cached_size_ = 0;
  metadata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadGoogleDriveResponse::~ReadGoogleDriveResponse() {
  SharedDtor();
}

void ReadGoogleDriveResponse::SharedDtor() {
  if (this != default_instance_) {
    delete metadata_;
  }
}

void ReadGoogleDriveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadGoogleDriveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadGoogleDriveResponse_descriptor_;
}

const ReadGoogleDriveResponse& ReadGoogleDriveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagreadermessages_2eproto();  return *default_instance_;
}

ReadGoogleDriveResponse* ReadGoogleDriveResponse::default_instance_ = NULL;

ReadGoogleDriveResponse* ReadGoogleDriveResponse::New() const {
  return new ReadGoogleDriveResponse;
}

void ReadGoogleDriveResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_metadata()) {
      if (metadata_ != NULL) metadata_->::pb::tagreader::SongMetadata::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadGoogleDriveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.tagreader.SongMetadata metadata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadGoogleDriveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.tagreader.SongMetadata metadata = 1;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metadata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadGoogleDriveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.tagreader.SongMetadata metadata = 1;
  if (has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->metadata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadGoogleDriveResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.tagreader.SongMetadata metadata = 1;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadGoogleDriveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadGoogleDriveResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadGoogleDriveResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadGoogleDriveResponse::MergeFrom(const ReadGoogleDriveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_metadata()) {
      mutable_metadata()->::pb::tagreader::SongMetadata::MergeFrom(from.metadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadGoogleDriveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadGoogleDriveResponse::CopyFrom(const ReadGoogleDriveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadGoogleDriveResponse::IsInitialized() const {
  
  return true;
}

void ReadGoogleDriveResponse::Swap(ReadGoogleDriveResponse* other) {
  if (other != this) {
    std::swap(metadata_, other->metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadGoogleDriveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadGoogleDriveResponse_descriptor_;
  metadata.reflection = ReadGoogleDriveResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Message::kIdFieldNumber;
const int Message::kReadFileRequestFieldNumber;
const int Message::kReadFileResponseFieldNumber;
const int Message::kSaveFileRequestFieldNumber;
const int Message::kSaveFileResponseFieldNumber;
const int Message::kIsMediaFileRequestFieldNumber;
const int Message::kIsMediaFileResponseFieldNumber;
const int Message::kLoadEmbeddedArtRequestFieldNumber;
const int Message::kLoadEmbeddedArtResponseFieldNumber;
const int Message::kReadGoogleDriveRequestFieldNumber;
const int Message::kReadGoogleDriveResponseFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
  read_file_request_ = const_cast< ::pb::tagreader::ReadFileRequest*>(&::pb::tagreader::ReadFileRequest::default_instance());
  read_file_response_ = const_cast< ::pb::tagreader::ReadFileResponse*>(&::pb::tagreader::ReadFileResponse::default_instance());
  save_file_request_ = const_cast< ::pb::tagreader::SaveFileRequest*>(&::pb::tagreader::SaveFileRequest::default_instance());
  save_file_response_ = const_cast< ::pb::tagreader::SaveFileResponse*>(&::pb::tagreader::SaveFileResponse::default_instance());
  is_media_file_request_ = const_cast< ::pb::tagreader::IsMediaFileRequest*>(&::pb::tagreader::IsMediaFileRequest::default_instance());
  is_media_file_response_ = const_cast< ::pb::tagreader::IsMediaFileResponse*>(&::pb::tagreader::IsMediaFileResponse::default_instance());
  load_embedded_art_request_ = const_cast< ::pb::tagreader::LoadEmbeddedArtRequest*>(&::pb::tagreader::LoadEmbeddedArtRequest::default_instance());
  load_embedded_art_response_ = const_cast< ::pb::tagreader::LoadEmbeddedArtResponse*>(&::pb::tagreader::LoadEmbeddedArtResponse::default_instance());
  read_google_drive_request_ = const_cast< ::pb::tagreader::ReadGoogleDriveRequest*>(&::pb::tagreader::ReadGoogleDriveRequest::default_instance());
  read_google_drive_response_ = const_cast< ::pb::tagreader::ReadGoogleDriveResponse*>(&::pb::tagreader::ReadGoogleDriveResponse::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  read_file_request_ = NULL;
  read_file_response_ = NULL;
  save_file_request_ = NULL;
  save_file_response_ = NULL;
  is_media_file_request_ = NULL;
  is_media_file_response_ = NULL;
  load_embedded_art_request_ = NULL;
  load_embedded_art_response_ = NULL;
  read_google_drive_request_ = NULL;
  read_google_drive_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete read_file_request_;
    delete read_file_response_;
    delete save_file_request_;
    delete save_file_response_;
    delete is_media_file_request_;
    delete is_media_file_response_;
    delete load_embedded_art_request_;
    delete load_embedded_art_response_;
    delete read_google_drive_request_;
    delete read_google_drive_response_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagreadermessages_2eproto();  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_read_file_request()) {
      if (read_file_request_ != NULL) read_file_request_->::pb::tagreader::ReadFileRequest::Clear();
    }
    if (has_read_file_response()) {
      if (read_file_response_ != NULL) read_file_response_->::pb::tagreader::ReadFileResponse::Clear();
    }
    if (has_save_file_request()) {
      if (save_file_request_ != NULL) save_file_request_->::pb::tagreader::SaveFileRequest::Clear();
    }
    if (has_save_file_response()) {
      if (save_file_response_ != NULL) save_file_response_->::pb::tagreader::SaveFileResponse::Clear();
    }
    if (has_is_media_file_request()) {
      if (is_media_file_request_ != NULL) is_media_file_request_->::pb::tagreader::IsMediaFileRequest::Clear();
    }
    if (has_is_media_file_response()) {
      if (is_media_file_response_ != NULL) is_media_file_response_->::pb::tagreader::IsMediaFileResponse::Clear();
    }
    if (has_load_embedded_art_request()) {
      if (load_embedded_art_request_ != NULL) load_embedded_art_request_->::pb::tagreader::LoadEmbeddedArtRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_load_embedded_art_response()) {
      if (load_embedded_art_response_ != NULL) load_embedded_art_response_->::pb::tagreader::LoadEmbeddedArtResponse::Clear();
    }
    if (has_read_google_drive_request()) {
      if (read_google_drive_request_ != NULL) read_google_drive_request_->::pb::tagreader::ReadGoogleDriveRequest::Clear();
    }
    if (has_read_google_drive_response()) {
      if (read_google_drive_response_ != NULL) read_google_drive_response_->::pb::tagreader::ReadGoogleDriveResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_read_file_request;
        break;
      }
      
      // optional .pb.tagreader.ReadFileRequest read_file_request = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_read_file_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_file_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_read_file_response;
        break;
      }
      
      // optional .pb.tagreader.ReadFileResponse read_file_response = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_read_file_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_file_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_save_file_request;
        break;
      }
      
      // optional .pb.tagreader.SaveFileRequest save_file_request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_save_file_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_save_file_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_save_file_response;
        break;
      }
      
      // optional .pb.tagreader.SaveFileResponse save_file_response = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_save_file_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_save_file_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_is_media_file_request;
        break;
      }
      
      // optional .pb.tagreader.IsMediaFileRequest is_media_file_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_is_media_file_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_is_media_file_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_is_media_file_response;
        break;
      }
      
      // optional .pb.tagreader.IsMediaFileResponse is_media_file_response = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_is_media_file_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_is_media_file_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_load_embedded_art_request;
        break;
      }
      
      // optional .pb.tagreader.LoadEmbeddedArtRequest load_embedded_art_request = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_load_embedded_art_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_load_embedded_art_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_load_embedded_art_response;
        break;
      }
      
      // optional .pb.tagreader.LoadEmbeddedArtResponse load_embedded_art_response = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_load_embedded_art_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_load_embedded_art_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_read_google_drive_request;
        break;
      }
      
      // optional .pb.tagreader.ReadGoogleDriveRequest read_google_drive_request = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_read_google_drive_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_google_drive_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_read_google_drive_response;
        break;
      }
      
      // optional .pb.tagreader.ReadGoogleDriveResponse read_google_drive_response = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_read_google_drive_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_google_drive_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .pb.tagreader.ReadFileRequest read_file_request = 2;
  if (has_read_file_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->read_file_request(), output);
  }
  
  // optional .pb.tagreader.ReadFileResponse read_file_response = 3;
  if (has_read_file_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->read_file_response(), output);
  }
  
  // optional .pb.tagreader.SaveFileRequest save_file_request = 4;
  if (has_save_file_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->save_file_request(), output);
  }
  
  // optional .pb.tagreader.SaveFileResponse save_file_response = 5;
  if (has_save_file_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->save_file_response(), output);
  }
  
  // optional .pb.tagreader.IsMediaFileRequest is_media_file_request = 6;
  if (has_is_media_file_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->is_media_file_request(), output);
  }
  
  // optional .pb.tagreader.IsMediaFileResponse is_media_file_response = 7;
  if (has_is_media_file_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->is_media_file_response(), output);
  }
  
  // optional .pb.tagreader.LoadEmbeddedArtRequest load_embedded_art_request = 8;
  if (has_load_embedded_art_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->load_embedded_art_request(), output);
  }
  
  // optional .pb.tagreader.LoadEmbeddedArtResponse load_embedded_art_response = 9;
  if (has_load_embedded_art_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->load_embedded_art_response(), output);
  }
  
  // optional .pb.tagreader.ReadGoogleDriveRequest read_google_drive_request = 10;
  if (has_read_google_drive_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->read_google_drive_request(), output);
  }
  
  // optional .pb.tagreader.ReadGoogleDriveResponse read_google_drive_response = 11;
  if (has_read_google_drive_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->read_google_drive_response(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .pb.tagreader.ReadFileRequest read_file_request = 2;
  if (has_read_file_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->read_file_request(), target);
  }
  
  // optional .pb.tagreader.ReadFileResponse read_file_response = 3;
  if (has_read_file_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->read_file_response(), target);
  }
  
  // optional .pb.tagreader.SaveFileRequest save_file_request = 4;
  if (has_save_file_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->save_file_request(), target);
  }
  
  // optional .pb.tagreader.SaveFileResponse save_file_response = 5;
  if (has_save_file_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->save_file_response(), target);
  }
  
  // optional .pb.tagreader.IsMediaFileRequest is_media_file_request = 6;
  if (has_is_media_file_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->is_media_file_request(), target);
  }
  
  // optional .pb.tagreader.IsMediaFileResponse is_media_file_response = 7;
  if (has_is_media_file_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->is_media_file_response(), target);
  }
  
  // optional .pb.tagreader.LoadEmbeddedArtRequest load_embedded_art_request = 8;
  if (has_load_embedded_art_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->load_embedded_art_request(), target);
  }
  
  // optional .pb.tagreader.LoadEmbeddedArtResponse load_embedded_art_response = 9;
  if (has_load_embedded_art_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->load_embedded_art_response(), target);
  }
  
  // optional .pb.tagreader.ReadGoogleDriveRequest read_google_drive_request = 10;
  if (has_read_google_drive_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->read_google_drive_request(), target);
  }
  
  // optional .pb.tagreader.ReadGoogleDriveResponse read_google_drive_response = 11;
  if (has_read_google_drive_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->read_google_drive_response(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .pb.tagreader.ReadFileRequest read_file_request = 2;
    if (has_read_file_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read_file_request());
    }
    
    // optional .pb.tagreader.ReadFileResponse read_file_response = 3;
    if (has_read_file_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read_file_response());
    }
    
    // optional .pb.tagreader.SaveFileRequest save_file_request = 4;
    if (has_save_file_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->save_file_request());
    }
    
    // optional .pb.tagreader.SaveFileResponse save_file_response = 5;
    if (has_save_file_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->save_file_response());
    }
    
    // optional .pb.tagreader.IsMediaFileRequest is_media_file_request = 6;
    if (has_is_media_file_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->is_media_file_request());
    }
    
    // optional .pb.tagreader.IsMediaFileResponse is_media_file_response = 7;
    if (has_is_media_file_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->is_media_file_response());
    }
    
    // optional .pb.tagreader.LoadEmbeddedArtRequest load_embedded_art_request = 8;
    if (has_load_embedded_art_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->load_embedded_art_request());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.tagreader.LoadEmbeddedArtResponse load_embedded_art_response = 9;
    if (has_load_embedded_art_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->load_embedded_art_response());
    }
    
    // optional .pb.tagreader.ReadGoogleDriveRequest read_google_drive_request = 10;
    if (has_read_google_drive_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read_google_drive_request());
    }
    
    // optional .pb.tagreader.ReadGoogleDriveResponse read_google_drive_response = 11;
    if (has_read_google_drive_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read_google_drive_response());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_read_file_request()) {
      mutable_read_file_request()->::pb::tagreader::ReadFileRequest::MergeFrom(from.read_file_request());
    }
    if (from.has_read_file_response()) {
      mutable_read_file_response()->::pb::tagreader::ReadFileResponse::MergeFrom(from.read_file_response());
    }
    if (from.has_save_file_request()) {
      mutable_save_file_request()->::pb::tagreader::SaveFileRequest::MergeFrom(from.save_file_request());
    }
    if (from.has_save_file_response()) {
      mutable_save_file_response()->::pb::tagreader::SaveFileResponse::MergeFrom(from.save_file_response());
    }
    if (from.has_is_media_file_request()) {
      mutable_is_media_file_request()->::pb::tagreader::IsMediaFileRequest::MergeFrom(from.is_media_file_request());
    }
    if (from.has_is_media_file_response()) {
      mutable_is_media_file_response()->::pb::tagreader::IsMediaFileResponse::MergeFrom(from.is_media_file_response());
    }
    if (from.has_load_embedded_art_request()) {
      mutable_load_embedded_art_request()->::pb::tagreader::LoadEmbeddedArtRequest::MergeFrom(from.load_embedded_art_request());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_load_embedded_art_response()) {
      mutable_load_embedded_art_response()->::pb::tagreader::LoadEmbeddedArtResponse::MergeFrom(from.load_embedded_art_response());
    }
    if (from.has_read_google_drive_request()) {
      mutable_read_google_drive_request()->::pb::tagreader::ReadGoogleDriveRequest::MergeFrom(from.read_google_drive_request());
    }
    if (from.has_read_google_drive_response()) {
      mutable_read_google_drive_response()->::pb::tagreader::ReadGoogleDriveResponse::MergeFrom(from.read_google_drive_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(read_file_request_, other->read_file_request_);
    std::swap(read_file_response_, other->read_file_response_);
    std::swap(save_file_request_, other->save_file_request_);
    std::swap(save_file_response_, other->save_file_response_);
    std::swap(is_media_file_request_, other->is_media_file_request_);
    std::swap(is_media_file_response_, other->is_media_file_response_);
    std::swap(load_embedded_art_request_, other->load_embedded_art_request_);
    std::swap(load_embedded_art_response_, other->load_embedded_art_response_);
    std::swap(read_google_drive_request_, other->read_google_drive_request_);
    std::swap(read_google_drive_response_, other->read_google_drive_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tagreader
}  // namespace pb

// @@protoc_insertion_point(global_scope)
