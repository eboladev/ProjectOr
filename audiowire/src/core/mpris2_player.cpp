/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -m -a core/mpris2_player -c Mpris2Player -i core/mpris2.h -l mpris::Mpris2 /home/mystte/rendu/audiowire-dev/src/dbus/org.mpris.MediaPlayer2.Player.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "core/mpris2_player.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class Mpris2Player
 */

Mpris2Player::Mpris2Player(mpris::Mpris2 *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

Mpris2Player::~Mpris2Player()
{
    // destructor
}

bool Mpris2Player::canControl() const
{
    // get the value of property CanControl
    return qvariant_cast< bool >(parent()->property("CanControl"));
}

bool Mpris2Player::canGoNext() const
{
    // get the value of property CanGoNext
    return qvariant_cast< bool >(parent()->property("CanGoNext"));
}

bool Mpris2Player::canGoPrevious() const
{
    // get the value of property CanGoPrevious
    return qvariant_cast< bool >(parent()->property("CanGoPrevious"));
}

bool Mpris2Player::canPause() const
{
    // get the value of property CanPause
    return qvariant_cast< bool >(parent()->property("CanPause"));
}

bool Mpris2Player::canPlay() const
{
    // get the value of property CanPlay
    return qvariant_cast< bool >(parent()->property("CanPlay"));
}

bool Mpris2Player::canSeek() const
{
    // get the value of property CanSeek
    return qvariant_cast< bool >(parent()->property("CanSeek"));
}

QString Mpris2Player::loopStatus() const
{
    // get the value of property LoopStatus
    return qvariant_cast< QString >(parent()->property("LoopStatus"));
}

void Mpris2Player::setLoopStatus(const QString &value)
{
    // set the value of property LoopStatus
    parent()->setProperty("LoopStatus", QVariant::fromValue(value));
}

double Mpris2Player::maximumRate() const
{
    // get the value of property MaximumRate
    return qvariant_cast< double >(parent()->property("MaximumRate"));
}

QVariantMap Mpris2Player::metadata() const
{
    // get the value of property Metadata
    return qvariant_cast< QVariantMap >(parent()->property("Metadata"));
}

double Mpris2Player::minimumRate() const
{
    // get the value of property MinimumRate
    return qvariant_cast< double >(parent()->property("MinimumRate"));
}

QString Mpris2Player::playbackStatus() const
{
    // get the value of property PlaybackStatus
    return qvariant_cast< QString >(parent()->property("PlaybackStatus"));
}

qlonglong Mpris2Player::position() const
{
    // get the value of property Position
    return qvariant_cast< qlonglong >(parent()->property("Position"));
}

double Mpris2Player::rate() const
{
    // get the value of property Rate
    return qvariant_cast< double >(parent()->property("Rate"));
}

void Mpris2Player::setRate(double value)
{
    // set the value of property Rate
    parent()->setProperty("Rate", QVariant::fromValue(value));
}

bool Mpris2Player::shuffle() const
{
    // get the value of property Shuffle
    return qvariant_cast< bool >(parent()->property("Shuffle"));
}

void Mpris2Player::setShuffle(bool value)
{
    // set the value of property Shuffle
    parent()->setProperty("Shuffle", QVariant::fromValue(value));
}

double Mpris2Player::volume() const
{
    // get the value of property Volume
    return qvariant_cast< double >(parent()->property("Volume"));
}

void Mpris2Player::setVolume(double value)
{
    // set the value of property Volume
    parent()->setProperty("Volume", QVariant::fromValue(value));
}

void Mpris2Player::Next()
{
    // handle method call org.mpris.MediaPlayer2.Player.Next
    parent()->Next();
}

void Mpris2Player::OpenUri(const QString &Uri)
{
    // handle method call org.mpris.MediaPlayer2.Player.OpenUri
    parent()->OpenUri(Uri);
}

void Mpris2Player::Pause()
{
    // handle method call org.mpris.MediaPlayer2.Player.Pause
    parent()->Pause();
}

void Mpris2Player::Play()
{
    // handle method call org.mpris.MediaPlayer2.Player.Play
    parent()->Play();
}

void Mpris2Player::PlayPause()
{
    // handle method call org.mpris.MediaPlayer2.Player.PlayPause
    parent()->PlayPause();
}

void Mpris2Player::Previous()
{
    // handle method call org.mpris.MediaPlayer2.Player.Previous
    parent()->Previous();
}

void Mpris2Player::Seek(qlonglong Offset)
{
    // handle method call org.mpris.MediaPlayer2.Player.Seek
    parent()->Seek(Offset);
}

void Mpris2Player::SetPosition(const QDBusObjectPath &TrackId, qlonglong Position)
{
    // handle method call org.mpris.MediaPlayer2.Player.SetPosition
    parent()->SetPosition(TrackId, Position);
}

void Mpris2Player::Stop()
{
    // handle method call org.mpris.MediaPlayer2.Player.Stop
    parent()->Stop();
}


#include "core/mpris2_player.moc"
