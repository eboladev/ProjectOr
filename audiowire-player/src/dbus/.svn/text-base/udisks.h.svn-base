/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -m -p dbus/udisks /home/mystte/rendu/AudioWire/audiowire/Perso/Player/src/dbus/org.freedesktop.UDisks.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef UDISKS_H_1361337698
#define UDISKS_H_1361337698

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.UDisks
 */
class OrgFreedesktopUDisksInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.UDisks"; }

public:
    OrgFreedesktopUDisksInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopUDisksInterface();

    Q_PROPERTY(bool DaemonIsInhibited READ daemonIsInhibited)
    inline bool daemonIsInhibited() const
    { return qvariant_cast< bool >(property("DaemonIsInhibited")); }

    Q_PROPERTY(QString DaemonVersion READ daemonVersion)
    inline QString daemonVersion() const
    { return qvariant_cast< QString >(property("DaemonVersion")); }

    Q_PROPERTY(QVariantList KnownFilesystems READ knownFilesystems)
    inline QVariantList knownFilesystems() const
    { return qvariant_cast< QVariantList >(property("KnownFilesystems")); }

    Q_PROPERTY(bool SupportsLuksDevices READ supportsLuksDevices)
    inline bool supportsLuksDevices() const
    { return qvariant_cast< bool >(property("SupportsLuksDevices")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> DriveInhibitAllPolling(const QStringList &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QLatin1String("DriveInhibitAllPolling"), argumentList);
    }

    inline QDBusPendingReply<QString> DriveSetAllSpindownTimeouts(int timeout_seconds, const QStringList &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(timeout_seconds) << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QLatin1String("DriveSetAllSpindownTimeouts"), argumentList);
    }

    inline QDBusPendingReply<> DriveUninhibitAllPolling(const QString &cookie)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(cookie);
        return asyncCallWithArgumentList(QLatin1String("DriveUninhibitAllPolling"), argumentList);
    }

    inline QDBusPendingReply<> DriveUnsetAllSpindownTimeouts(const QString &cookie)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(cookie);
        return asyncCallWithArgumentList(QLatin1String("DriveUnsetAllSpindownTimeouts"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > EnumerateAdapters()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("EnumerateAdapters"), argumentList);
    }

    inline QDBusPendingReply<QStringList> EnumerateDeviceFiles()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("EnumerateDeviceFiles"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > EnumerateDevices()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("EnumerateDevices"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > EnumerateExpanders()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("EnumerateExpanders"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > EnumeratePorts()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("EnumeratePorts"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> FindDeviceByDeviceFile(const QString &device_file)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(device_file);
        return asyncCallWithArgumentList(QLatin1String("FindDeviceByDeviceFile"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> FindDeviceByMajorMinor(qlonglong device_major, qlonglong device_minor)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(device_major) << QVariant::fromValue(device_minor);
        return asyncCallWithArgumentList(QLatin1String("FindDeviceByMajorMinor"), argumentList);
    }

    inline QDBusPendingReply<QString> Inhibit()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Inhibit"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> LinuxLvm2LVCreate(const QString &group_uuid, const QString &name, qulonglong size, uint num_stripes, qulonglong stripe_size, uint num_mirrors, const QStringList &options, const QString &fstype, const QStringList &fsoptions)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(group_uuid) << QVariant::fromValue(name) << QVariant::fromValue(size) << QVariant::fromValue(num_stripes) << QVariant::fromValue(stripe_size) << QVariant::fromValue(num_mirrors) << QVariant::fromValue(options) << QVariant::fromValue(fstype) << QVariant::fromValue(fsoptions);
        return asyncCallWithArgumentList(QLatin1String("LinuxLvm2LVCreate"), argumentList);
    }

    inline QDBusPendingReply<> LinuxLvm2LVRemove(const QString &group_uuid, const QString &uuid, const QStringList &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(group_uuid) << QVariant::fromValue(uuid) << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QLatin1String("LinuxLvm2LVRemove"), argumentList);
    }

    inline QDBusPendingReply<> LinuxLvm2LVSetName(const QString &group_uuid, const QString &uuid, const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(group_uuid) << QVariant::fromValue(uuid) << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QLatin1String("LinuxLvm2LVSetName"), argumentList);
    }

    inline QDBusPendingReply<> LinuxLvm2LVStart(const QString &group_uuid, const QString &uuid, const QStringList &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(group_uuid) << QVariant::fromValue(uuid) << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QLatin1String("LinuxLvm2LVStart"), argumentList);
    }

    inline QDBusPendingReply<> LinuxLvm2VGAddPV(const QString &uuid, const QDBusObjectPath &physical_volume, const QStringList &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uuid) << QVariant::fromValue(physical_volume) << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QLatin1String("LinuxLvm2VGAddPV"), argumentList);
    }

    inline QDBusPendingReply<> LinuxLvm2VGRemovePV(const QString &vg_uuid, const QString &pv_uuid, const QStringList &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(vg_uuid) << QVariant::fromValue(pv_uuid) << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QLatin1String("LinuxLvm2VGRemovePV"), argumentList);
    }

    inline QDBusPendingReply<> LinuxLvm2VGSetName(const QString &uuid, const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uuid) << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QLatin1String("LinuxLvm2VGSetName"), argumentList);
    }

    inline QDBusPendingReply<> LinuxLvm2VGStart(const QString &uuid, const QStringList &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uuid) << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QLatin1String("LinuxLvm2VGStart"), argumentList);
    }

    inline QDBusPendingReply<> LinuxLvm2VGStop(const QString &uuid, const QStringList &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uuid) << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QLatin1String("LinuxLvm2VGStop"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> LinuxMdCreate(const QList<QDBusObjectPath> &components, const QString &level, qulonglong stripe_size, const QString &name, const QStringList &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(components) << QVariant::fromValue(level) << QVariant::fromValue(stripe_size) << QVariant::fromValue(name) << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QLatin1String("LinuxMdCreate"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> LinuxMdStart(const QList<QDBusObjectPath> &components, const QStringList &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(components) << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QLatin1String("LinuxMdStart"), argumentList);
    }

    inline QDBusPendingReply<> Uninhibit(const QString &cookie)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(cookie);
        return asyncCallWithArgumentList(QLatin1String("Uninhibit"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void AdapterAdded(const QDBusObjectPath &adapter);
    void AdapterChanged(const QDBusObjectPath &adapter);
    void AdapterRemoved(const QDBusObjectPath &adapter);
    void DeviceAdded(const QDBusObjectPath &device);
    void DeviceChanged(const QDBusObjectPath &device);
    void DeviceJobChanged(const QDBusObjectPath &device, bool job_in_progress, bool job_is_cancellable, const QString &job_id, int job_num_tasks, int job_cur_task, const QString &job_cur_task_id, double job_cur_task_percentage);
    void DeviceRemoved(const QDBusObjectPath &device);
    void ExpanderAdded(const QDBusObjectPath &expander);
    void ExpanderChanged(const QDBusObjectPath &expander);
    void ExpanderRemoved(const QDBusObjectPath &expander);
    void PortAdded(const QDBusObjectPath &port);
    void PortChanged(const QDBusObjectPath &port);
    void PortRemoved(const QDBusObjectPath &port);
};

#endif
